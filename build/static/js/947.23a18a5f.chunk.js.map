{"version":3,"file":"static/js/947.23a18a5f.chunk.js","mappings":"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","sources":["containers/environment map/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { OrbitControls } from \"three/addons/controls/OrbitControls.js\"\r\nimport GUI from \"three/examples/jsm/libs/lil-gui.module.min.js\";\r\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\r\nimport { RGBELoader } from \"three/addons/loaders/RGBELoader.js\";\r\nimport { EXRLoader } from \"three/addons/loaders/EXRLoader.js\";\r\nimport texture from \"./images/1k.hdr\"\r\n\r\nexport default class environmentMap extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n\r\n        /* \r\n        Loaders\r\n        */\r\n        const gltfLoader = new GLTFLoader()\r\n        const cubeTextureLoader = new THREE.CubeTextureLoader()\r\n        const rgbeLoader = new RGBELoader()\r\n        const exrLoader = new EXRLoader() // NVIDIA CANVAS\r\n        const textureLoader = new THREE.TextureLoader() // https://skybox.blockadelabs.com/\r\n        /* \r\n        Base\r\n        */\r\n        // debug\r\n        const gui = new GUI();\r\n        const global = {};\r\n\r\n        // Canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\")\r\n        // scene\r\n        const scene = new THREE.Scene()\r\n\r\n        /* \r\n        Update all materials\r\n        */\r\n        const updateAllMaterials = () => {\r\n            scene.traverse(child => {\r\n                if (child.isMesh && child.material.isMeshStandardMaterial) {\r\n                    child.material.envMapIntensity = global.envMapIntensity\r\n                }\r\n            })\r\n        }\r\n        /* \r\n        Environment map\r\n        */\r\n        scene.backgroundBlurriness = 0\r\n        scene.backgroundIntensity = 1\r\n\r\n        gui.add(scene, \"backgroundBlurriness\").min(0).max(1).step(0.001)\r\n        gui.add(scene, \"backgroundIntensity\").min(0).max(10).step(0.001)\r\n        // Global intensity\r\n        global.envMapIntensity = 1;\r\n        gui.add(global, \"envMapIntensity\", 0, 10, 0.001).onChange(updateAllMaterials)\r\n\r\n        // // LDR cube texture\r\n        // const environmentMap = cubeTextureLoader.load([\r\n        //     \"/environmentMap/px.jpg\",\r\n        //     \"/environmentMap/nx.jpg\",\r\n        //     \"/environmentMap/py.jpg\",\r\n        //     \"/environmentMap/ny.jpg\",\r\n        //     \"/environmentMap/pz.jpg\",\r\n        //     \"/environmentMap/nz.jpg\",\r\n        // ])\r\n        // // To apply the environment map as lighting to the whole scene\r\n        // scene.environment = environmentMap\r\n        // scene.background = environmentMap\r\n\r\n        // HDR (RGBE) equirectangular\r\n        // rgbeLoader.load(\"/environmentMap/1k.hdr\", (environmentMap) => {\r\n            // //等距圆柱投影\r\n        //     environmentMap.mapping = THREE.EquirectangularReflectionMapping\r\n\r\n        //     scene.environment = environmentMap\r\n        //     scene.background = environmentMap\r\n        // })\r\n\r\n        // HDR(EXR) equirectangular\r\n        // LDR equirectangular\r\n\r\n        // // Ground projected skybox\r\n        // rgbeLoader.load(\"/environmentMap/1k.hdr\", (environmentMap) => {\r\n        //     environmentMap.mapping = THREE.EquirectangularReflectionMapping\r\n        //     scene.environment = environmentMap\r\n\r\n        //     // Skybox\r\n        //     const skybox = new GroundedSkybox(environmentMap, 1, 1)\r\n        //     skybox.scale.setScalar(50)\r\n        //     scene.add(skybox)\r\n        //     // 视频里是GroundProjectedSkybox，\r\n        //     // gui.add(skybox, \"radius\", 1, 200, 0.1).name(\"skyboxRadius\")\r\n        //     // gui.add(skybox, \"height\", 1, 200, 0.1).name(\"skyboxHeight\")\r\n\r\n        // })\r\n\r\n        /* \r\n        real time environment map\r\n        */\r\n        rgbeLoader.load(texture, (environmentMap) => {\r\n            environmentMap.mapping = THREE.EquirectangularReflectionMapping\r\n            scene.background = environmentMap\r\n        })\r\n\r\n        // Holy donut\r\n        const holyDonut = new THREE.Mesh(\r\n            new THREE.TorusGeometry(8, 0.5),\r\n            new THREE.MeshBasicMaterial({ color: \"white\" })\r\n        )\r\n        holyDonut.position.y = 3.5\r\n        holyDonut.layers.enable(1);\r\n        scene.add(holyDonut);\r\n\r\n        // Cube render target\r\n        const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(\r\n            256,\r\n            {\r\n                type: THREE.HalfFloatType // use only 16bits\r\n            }\r\n        )\r\n        scene.environment = cubeRenderTarget.texture;\r\n\r\n        // Cube camera\r\n        const cubeCamera = new THREE.CubeCamera(0.1, 100, cubeRenderTarget)\r\n        cubeCamera.layers.set(1)\r\n\r\n        /* \r\n        Torus Knot\r\n        */\r\n        const torusKnot = new THREE.Mesh(\r\n            new THREE.TorusKnotGeometry(1, 0.4, 100, 16),\r\n            new THREE.MeshStandardMaterial({ roughness: 0, metalness: 1, color: 0xaaaaaa })\r\n        )\r\n        // torusKnot.material.envMap = environmentMap\r\n        torusKnot.position.x = -4\r\n        torusKnot.position.y = 4\r\n        scene.add(torusKnot)\r\n\r\n        /* \r\n        Models\r\n        */\r\n        gltfLoader.load(\r\n            \"./models/FlightHelmet/glTF/FlightHelmet.gltf\",\r\n            (gltf) => {\r\n                gltf.scene.scale.set(10, 10, 10)\r\n                scene.add(gltf.scene)\r\n\r\n                updateAllMaterials()\r\n            }\r\n        )\r\n\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth\r\n            sizes.height = window.innerHeight\r\n\r\n            camera.aspect = sizes.width / sizes.height\r\n            camera.updateProjectionMatrix()\r\n\r\n            renderer.setSize(sizes.width, sizes.height)\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n        })\r\n\r\n        /**\r\n         * Camera\r\n         */\r\n        // Base camera\r\n        const camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            sizes.width / sizes.height,\r\n            0.1,\r\n            100\r\n        );\r\n        camera.position.set(4, 1, -4);\r\n        scene.add(camera);\r\n\r\n        // Controls\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /**\r\n         * Renderer\r\n         */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            /**\r\n             * To make the edges of the objects more smooth\r\n             */\r\n            antialias: true,\r\n        });\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /**\r\n         * Animate\r\n         */\r\n        const clock = new THREE.Clock()\r\n        const tick = () => {\r\n\r\n            // Time\r\n            const elapsedTime = clock.getElapsedTime();\r\n\r\n            // Real time environment map\r\n            if (holyDonut) {\r\n                holyDonut.rotation.x = Math.sin(elapsedTime) * 2;\r\n\r\n                cubeCamera.update(renderer, scene);\r\n            }\r\n            // Update controls\r\n            controls.update();\r\n\r\n            // Render\r\n            renderer.render(scene, camera);\r\n\r\n            // Call tick again on the next frame\r\n            window.requestAnimationFrame(tick);\r\n        };\r\n\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas className=\"webgl\"></canvas>\r\n        )\r\n    }\r\n}"],"names":["environmentMap","React","constructor","arguments","initThree","gltfLoader","GLTFLoader","rgbeLoader","THREE","RGBELoader","gui","EXRLoader","GUI","global","canvas","document","querySelector","scene","updateAllMaterials","traverse","child","isMesh","material","isMeshStandardMaterial","envMapIntensity","backgroundBlurriness","backgroundIntensity","add","min","max","step","onChange","load","texture","mapping","background","holyDonut","color","position","y","layers","enable","cubeRenderTarget","type","environment","cubeCamera","set","torusKnot","roughness","metalness","x","gltf","scale","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","devicePixelRatio","controls","OrbitControls","enableDamping","antialias","clock","tick","elapsedTime","getElapsedTime","rotation","sin","update","render","requestAnimationFrame","componentDidMount","this","_jsx","className"],"sourceRoot":""}