{"version":3,"file":"static/js/433.e8dc55a2.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/loaders/DRACOLoader.js","containers/imported models/index.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.toWorkingColorSpace( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n","import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\"\r\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\n\r\nexport default class importedModels extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* \r\n        Base\r\n        */\r\n        // Canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\");\r\n        // Scene\r\n        const scene = new THREE.Scene();\r\n        /* \r\n        Models\r\n        */\r\n        const dracoLoader = new DRACOLoader();\r\n        dracoLoader.setDecoderPath(\"./draco/\");\r\n\r\n        const gltfModel = new GLTFLoader();\r\n        gltfModel.setDRACOLoader(dracoLoader);\r\n\r\n        let mixer = null;\r\n        gltfModel.load(\r\n            \"./models/Fox/glTF/Fox.gltf\", // 这个路径问题耗了挺久\r\n            (gltf) => {\r\n                // const children = [...gltf.scene.children];\r\n                // for (const child of children)\r\n                // {\r\n                //     scene.add(child);\r\n                // }\r\n\r\n                gltf.scene.scale.set(0.025, 0.025, 0.025);\r\n                scene.add(gltf.scene);\r\n\r\n                mixer = new THREE.AnimationMixer(gltf.scene);\r\n                const action = mixer.clipAction(gltf.animations[1]);\r\n                action.play();\r\n            }\r\n        )\r\n        // https://threejs.org/editor/ 可以拖模型进去看\r\n\r\n        /* \r\n        Floor\r\n        */\r\n        const floor = new THREE.Mesh(\r\n            new THREE.PlaneGeometry(10, 10),\r\n            new THREE.MeshStandardMaterial({\r\n                color: \"#444444\",\r\n                metalness: 0,\r\n                roughness: 0.5\r\n            })\r\n        )\r\n        floor.receiveShadow = true;\r\n        floor.rotation.x = - Math.PI * 0.5;\r\n        scene.add(floor);\r\n\r\n        /* \r\n        Light\r\n        */\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.mapSize.set(1024, 1024);\r\n        directionalLight.shadow.camera.far = 15;\r\n        directionalLight.shadow.camera.left = -7;\r\n        directionalLight.shadow.camera.top = 7;\r\n        directionalLight.shadow.camera.right = 7;\r\n        directionalLight.shadow.camera.bottom = -7;\r\n        directionalLight.position.set(5, 5, 5);\r\n        scene.add(directionalLight);\r\n\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        })\r\n\r\n        /* \r\n        Camera\r\n        */\r\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(2, 2, 2);\r\n        scene.add(camera);\r\n\r\n        /* \r\n        Controls\r\n        */\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.target.set(0, 0.75, 0);\r\n        controls.enableDamping = true;\r\n\r\n        /* \r\n        Renderer\r\n        */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        });\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n        const clock = new THREE.Clock();\r\n        let previousTime = 0;\r\n        const tick = () => {\r\n            const elapsedTime = clock.getElapsedTime();\r\n            const deltaTime = elapsedTime - previousTime;\r\n            previousTime = elapsedTime;\r\n\r\n            if (mixer)\r\n                mixer.update(deltaTime);\r\n\r\n            renderer.render(scene, camera);\r\n            controls.update();\r\n            window.requestAnimationFrame(tick);\r\n        }\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas className=\"webgl\"></canvas>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["_taskCache","WeakMap","DRACOLoader","Loader","constructor","manager","super","this","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","arguments","length","undefined","decodeDracoFile","SRGBColorSpace","catch","callback","attributeIDs","attributeTypes","vertexColorSpace","LinearSRGBColorSpace","taskConfig","useUniqueIDs","decodeGeometry","then","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","BufferGeometry","index","setIndex","BufferAttribute","array","i","attributes","result","name","itemSize","attribute","_assignVertexColorSpace","normalized","Float32Array","setAttribute","inputColorSpace","_color","Color","il","count","fromBufferAttribute","ColorManagement","toWorkingColorSpace","setXYZ","r","g","b","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","console","error","sort","a","debug","log","map","dispose","terminate","revokeObjectURL","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","numComponents","num_components","numValues","num_points","BYTES_PER_ELEMENT","dataType","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","HEAPF32","slice","_free","onModuleLoaded","DracoDecoderModule","module","Decoder","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeArrayToMesh","POINT_CLOUD","PointCloud","DecodeArrayToPointCloud","ok","error_msg","self","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","attributeResult","numFaces","num_faces","numIndices","GetTrianglesUInt32Array","decodeIndex","destroy","buffers","attr","importedModels","React","initThree","canvas","document","querySelector","scene","THREE","dracoLoader","gltfModel","GLTFLoader","setDRACOLoader","mixer","gltf","scale","add","clipAction","animations","play","floor","metalness","roughness","receiveShadow","rotation","x","Math","PI","ambientLight","directionalLight","castShadow","shadow","mapSize","camera","far","left","top","right","bottom","sizes","width","window","innerWidth","height","innerHeight","addEventListener","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","controls","OrbitControls","target","enableDamping","shadowMap","enabled","clock","previousTime","tick","elapsedTime","getElapsedTime","deltaTime","update","render","requestAnimationFrame","componentDidMount","_jsx","_Fragment","children","className"],"sourceRoot":""}