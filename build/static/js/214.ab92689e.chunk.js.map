{"version":3,"file":"static/js/214.ab92689e.chunk.js","mappings":"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","sources":["containers/scroll based animation/index.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./index.css\"\r\nimport * as THREE from \"three\"\r\nimport GUI from \"three/examples/jsm/libs/lil-gui.module.min.js\";\r\nimport gsap from \"gsap\";\r\nimport texture from \"./textures/3.jpg\";\r\n\r\nexport default class scrollBasedAnimation extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* \r\n        Debug\r\n        */\r\n        const gui = new GUI();\r\n\r\n        const parameters = {\r\n            materialColor: \"#ffeded\"\r\n        }\r\n\r\n        gui\r\n            .addColor(parameters, \"materialColor\")\r\n            .onChange(() => {\r\n                material.color.set(parameters.materialColor);\r\n                particleMaterial.color.set(parameters.materialColor);\r\n            })\r\n\r\n        /* \r\n        Base\r\n        */\r\n        // Canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\")\r\n        // Scene\r\n        const scene = new THREE.Scene();\r\n        /* \r\n        Objects\r\n        */\r\n        // Texture\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const gradientTexture = textureLoader.load(texture);\r\n        gradientTexture.magFilter = THREE.NearestFilter;\r\n\r\n        // Material\r\n        const material = new THREE.MeshToonMaterial({\r\n            color: parameters.materialColor,\r\n            gradientMap: gradientTexture\r\n        });\r\n        // Meshes\r\n        const objectDistance = 4;\r\n\r\n        const mesh1 = new THREE.Mesh(\r\n            new THREE.TorusGeometry(1, 0.4, 16, 60),\r\n            material\r\n        )\r\n        const mesh2 = new THREE.Mesh(\r\n            new THREE.ConeGeometry(1, 2, 32),\r\n            material\r\n        )\r\n        const mesh3 = new THREE.Mesh(\r\n            new THREE.TorusKnotGeometry(0.8, 0.35, 100, 16),\r\n            material\r\n        )\r\n\r\n        mesh1.position.y = - objectDistance * 0;\r\n        mesh2.position.y = - objectDistance * 1;\r\n        mesh3.position.y = - objectDistance * 2;\r\n\r\n        mesh1.position.x = 2;\r\n        mesh2.position.x = - 2;\r\n        mesh3.position.x = 2;\r\n\r\n        scene.add(mesh1, mesh2, mesh3);\r\n\r\n        const sectionMeshes = [mesh1, mesh2, mesh3];\r\n\r\n        /* \r\n        Particles\r\n        */\r\n        // geometry\r\n        const particlesCount = 200;\r\n        const positions = new Float32Array(particlesCount * 3);\r\n        for (let i = 0; i < particlesCount; i++) {\r\n            const i3 = i * 3;\r\n            positions[i3] = (Math.random() - 0.5) * 10\r\n            positions[i3 + 1] = objectDistance * 0.5 - Math.random() * objectDistance * sectionMeshes.length;\r\n            positions[i3 + 2] = (Math.random() - 0.5) * 10\r\n        }\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        particleGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\r\n        // Material\r\n        const particleMaterial = new THREE.PointsMaterial({\r\n            color: parameters.materialColor,\r\n            sizeAttenuation: true,\r\n            size: 0.03\r\n        });\r\n        // Points\r\n        const particles = new THREE.Points(particleGeometry, particleMaterial);\r\n        scene.add(particles);\r\n\r\n        /* \r\n        Lights\r\n        */\r\n        const directionalLight = new THREE.DirectionalLight(\"#ffffff\", 1);\r\n        directionalLight.position.set(1, 1, 0);\r\n        scene.add(directionalLight);\r\n\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            // Update sizes\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            // Update camera\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            // Update renderer\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        });\r\n\r\n        /* \r\n        Camera\r\n        */\r\n        // Group\r\n        const cameraGroup = new THREE.Group();\r\n        scene.add(cameraGroup)\r\n\r\n        // Base camera\r\n        const camera = new THREE.PerspectiveCamera(\r\n            35,\r\n            sizes.width / sizes.height,\r\n            0.1,\r\n            100\r\n        );\r\n        camera.position.z = 8;\r\n        cameraGroup.add(camera);\r\n\r\n        /* \r\n        Renderer\r\n        */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            alpha: true,\r\n        });\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /* \r\n        Scroll\r\n        */\r\n        let scrollY = window.scrollY;\r\n        let currentSection = 0;\r\n\r\n        window.addEventListener(\"scroll\", () => {\r\n            scrollY = window.scrollY;\r\n\r\n            const newSection = Math.round(scrollY / sizes.height);\r\n\r\n            if (newSection != currentSection) {\r\n                currentSection = newSection;\r\n\r\n                gsap.to(\r\n                    sectionMeshes[currentSection].rotation,\r\n                    {\r\n                        duration: 1.5,\r\n                        ease: \"power2.inOut\",\r\n                        x: \"+=6\",\r\n                        y: \"+=3\",\r\n                        z: \"+=1.5\"\r\n                    }\r\n                )\r\n            }\r\n        })\r\n\r\n        /* \r\n        Cursor\r\n        */\r\n        const cursor = {};\r\n        cursor.x = 0;\r\n        cursor.y = 0;\r\n\r\n        window.addEventListener(\"mousemove\", (event) => {\r\n            cursor.x = event.clientX / sizes.width - 0.5;\r\n            cursor.y = event.clientY / sizes.height - 0.5;\r\n\r\n        })\r\n\r\n        /* \r\n        Animation\r\n        */\r\n        const clock = new THREE.Clock();\r\n        let previousTime = 0;\r\n\r\n        const tick = () => {\r\n            const elapsedTime = clock.getElapsedTime();\r\n            const deltaTime = elapsedTime - previousTime;\r\n            previousTime = elapsedTime;\r\n\r\n            // Animate camera\r\n            camera.position.y = - scrollY / sizes.height * objectDistance; // 下降一个单位 * 物体之间的距离\r\n\r\n            // 视差用相机组\r\n            const parallaxX = cursor.x * 0.5;\r\n            const parallaxY = - cursor.y * 0.5;\r\n            // smooth\r\n            cameraGroup.position.x += (parallaxX - cameraGroup.position.x) * 5 * deltaTime;\r\n            cameraGroup.position.y += (parallaxY - cameraGroup.position.y) * 5 * deltaTime;\r\n\r\n            // Animate meshes\r\n            for (const mesh of sectionMeshes) {\r\n                mesh.rotation.x += deltaTime * 0.1;\r\n                mesh.rotation.y += deltaTime * 0.12;\r\n            }\r\n\r\n            // Render\r\n            renderer.render(scene, camera);\r\n\r\n            // Call tick again on the next frame\r\n            window.requestAnimationFrame(tick)\r\n        }\r\n        tick()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas className=\"webgl\"></canvas>\r\n\r\n                <section className=\"section\">\r\n                    <h1>My Portfolio</h1>\r\n                </section>\r\n                <section className=\"section\">\r\n                    <h1>My projects</h1>\r\n                </section>\r\n                <section className=\"section\">\r\n                    <h1>Contact me</h1>\r\n                </section>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["scrollBasedAnimation","React","constructor","arguments","initThree","gui","GUI","parameters","materialColor","addColor","onChange","material","color","set","particleMaterial","canvas","document","querySelector","scene","THREE","gradientTexture","load","texture","magFilter","gradientMap","mesh1","mesh2","mesh3","position","y","x","add","sectionMeshes","positions","Float32Array","particlesCount","i","i3","Math","random","objectDistance","length","particleGeometry","setAttribute","sizeAttenuation","size","particles","directionalLight","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","cameraGroup","z","alpha","scrollY","currentSection","newSection","round","gsap","to","rotation","duration","ease","cursor","event","clientX","clientY","clock","previousTime","tick","elapsedTime","getElapsedTime","deltaTime","parallaxX","parallaxY","mesh","render","requestAnimationFrame","componentDidMount","this","_jsxs","_Fragment","children","_jsx","className"],"sourceRoot":""}