{"version":3,"file":"static/js/799.bf084b1e.chunk.js","mappings":"+LAKe,MAAMA,UAAeC,EAAAA,UAAgBC,WAAAA,GAAA,SAAAC,WAAA,KAKhDC,UAAY,KAER,MAAMC,EAAM,IAAIC,EAAAA,GAEVC,EAASC,SAASC,cAAc,gBAEhCC,EAAQ,IAAIC,EAAAA,IAIZC,EAAa,CACnBA,MAAmB,IACnBA,KAAkB,IAClBA,OAAoB,EACpBA,OAAoB,EACpBA,KAAkB,EAClBA,WAAwB,GACxBA,gBAA6B,EAC7BA,YAAyB,UACzBA,aAA0B,WAE1B,IAAIC,EAAW,KACXC,EAAW,KACXC,EAAS,KACb,MAAMC,EAAiBA,KAEL,MAAVD,IACAF,EAASI,UACTH,EAASG,UACTP,EAAMQ,OAAOH,IAGjB,MAAMI,EAAY,IAAIC,aAAgC,EAAnBR,EAAWS,OACxCC,EAAS,IAAIF,aAAgC,EAAnBR,EAAWS,OAErCE,EAAc,IAAIZ,EAAAA,IAAYC,EAAWY,aACzCC,EAAe,IAAId,EAAAA,IAAYC,EAAWc,cAEhD,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAWS,MAAOM,IAAK,CACvC,MAAMC,EAAS,EAAJD,EAGLE,EAASC,KAAKC,SAAWnB,EAAWiB,OAEpCG,EAAYH,EAASjB,EAAWqB,KAEhCC,EAAeP,EAAIf,EAAWuB,OAAUvB,EAAWuB,OAASL,KAAKM,GAAK,EAEtEC,EAAUP,KAAKQ,IAAIR,KAAKC,SAAUnB,EAAW2B,kBAAoBT,KAAKC,SAAW,GAAM,GAAK,GAC5FS,EAAUV,KAAKQ,IAAIR,KAAKC,SAAUnB,EAAW2B,kBAAoBT,KAAKC,SAAW,GAAM,GAAK,GAC5FU,EAAUX,KAAKQ,IAAIR,KAAKC,SAAUnB,EAAW2B,kBAAoBT,KAAKC,SAAW,GAAM,GAAK,GAElGZ,EAAUS,GAAME,KAAKY,IAAIR,EAAcF,GAAaH,EAASQ,EAC7DlB,EAAUS,EAAK,GAAKY,EACpBrB,EAAUS,EAAK,GAAKE,KAAKa,IAAIT,EAAcF,GAAaH,EAASY,EAGjE,MAAMG,EAAarB,EAAYsB,QAC/BD,EAAWE,KAAKrB,EAAcI,EAASjB,EAAWiB,QAClDP,EAAOM,GAAMgB,EAAWG,EACxBzB,EAAOM,EAAK,GAAKgB,EAAWI,EAC5B1B,EAAOM,EAAK,GAAKgB,EAAWK,CAChC,CACApC,EAAW,IAAIF,EAAAA,IACfE,EAASqC,aAAa,WAAY,IAAIvC,EAAAA,IAAsBQ,EAAW,IACvEN,EAASqC,aAAa,QAAS,IAAIvC,EAAAA,IAAsBW,EAAQ,IAGjER,EAAW,IAAIH,EAAAA,IAAqB,CAChCwC,KAAMvC,EAAWuC,KACjBC,iBAAiB,EACjBC,YAAY,EACZC,SAAU3C,EAAAA,IACV4C,cAAc,IAIlBxC,EAAS,IAAIJ,EAAAA,IAAaE,EAAUC,GACpCJ,EAAM8C,IAAIzC,EAAO,EAErBC,IACAX,EAAImD,IAAI5C,EAAY,QAAS,IAAK,IAAO,KAAK6C,eAAezC,GAC7DX,EAAImD,IAAI5C,EAAY,OAAQ,IAAM,GAAK,KAAM6C,eAAezC,GAC5DX,EAAImD,IAAI5C,EAAY,SAAU,IAAM,GAAI,KAAM6C,eAAezC,GAC7DX,EAAImD,IAAI5C,EAAY,SAAU,EAAG,GAAI,GAAG6C,eAAezC,GACvDX,EAAImD,IAAI5C,EAAY,QAAS,EAAG,EAAG,KAAM6C,eAAezC,GACxDX,EAAImD,IAAI5C,EAAY,aAAc,EAAG,EAAG,KAAM6C,eAAezC,GAC7DX,EAAImD,IAAI5C,EAAY,kBAAmB,EAAG,GAAI,KAAM6C,eAAezC,GACnEX,EAAImD,IAAI5C,EAAY,eAAe6C,eAAezC,GAClDX,EAAImD,IAAI5C,EAAY,gBAAgB6C,eAAezC,GAGnD,MAAM0C,EAAQ,CACVC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAEnBH,OAAOI,iBAAiB,UAAU,KAC9BN,EAAMC,MAAQC,OAAOC,WACrBH,EAAMI,OAASF,OAAOG,YAEtBE,EAAOC,OAASR,EAAMC,MAAQD,EAAMI,OACpCG,EAAOE,yBAEPC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAcxC,KAAKyC,IAAIX,OAAOY,iBAAkB,GAAG,IAIhE,MAAMP,EAAS,IAAItD,EAAAA,IAAwB,GAAI+C,EAAMC,MAAQD,EAAMI,OAAQ,GAAK,KAChFG,EAAOQ,SAASC,IAAI,EAAG,EAAG,GAC1BhE,EAAM8C,IAAIS,GAGV,MAAMU,EAAW,IAAIC,EAAAA,EAAcX,EAAQ1D,GAC3CoE,EAASE,eAAgB,EAGzB,MAAMT,EAAW,IAAIzD,EAAAA,IAAoB,CACrCJ,OAAQA,IAEZ6D,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAcxC,KAAKyC,IAAIX,OAAOY,iBAAkB,IAGzD,MAAMM,EAAQ,IAAInE,EAAAA,IACZoE,EAAOA,KACWD,EAAME,iBAK1BL,EAASM,SAGTb,EAASc,OAAOxE,EAAOuD,GAGvBL,OAAOuB,sBAAsBJ,EAAK,EAEtCA,GAAM,CACT,CAhJDK,iBAAAA,GACIC,KAAKjF,WACT,CAgJA8E,MAAAA,GACI,OACII,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,WAG9B,E","sources":["containers/galaxy generator/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min.js\"\r\n\r\nexport default class Galaxy extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* debug */\r\n        const gui = new GUI();\r\n        /* canvas */\r\n        const canvas = document.querySelector(\"canvas.webgl\");\r\n        /* scene */\r\n        const scene = new THREE.Scene();\r\n        /* \r\n        Galaxy\r\n        */\r\n        const parameters = {};\r\n        parameters.count = 200;\r\n        parameters.size = 0.02;\r\n        parameters.radius = 5;\r\n        parameters.branch = 3;\r\n        parameters.spin = 1;\r\n        parameters.randomness = 0.2;\r\n        parameters.randomnessPower = 3;\r\n        parameters.insideColor = \"#ff6030\";\r\n        parameters.outsideColor = \"#1b3984\";\r\n\r\n        let geometry = null;\r\n        let material = null;\r\n        let points = null;\r\n        const generateGalaxy = () => {\r\n            // destroy old galaxy\r\n            if (points != null) {\r\n                geometry.dispose();\r\n                material.dispose();\r\n                scene.remove(points);\r\n            }\r\n            // geometry\r\n            const positions = new Float32Array(parameters.count * 3);\r\n            const colors = new Float32Array(parameters.count * 3);\r\n\r\n            const colorInside = new THREE.Color(parameters.insideColor);\r\n            const colorOutside = new THREE.Color(parameters.outsideColor);\r\n\r\n            for (let i = 0; i < parameters.count; i++) {\r\n                const i3 = i * 3;\r\n\r\n                // Position\r\n                const radius = Math.random() * parameters.radius;\r\n\r\n                const spinAngle = radius * parameters.spin; // radius越大，旋转越多\r\n                // 0 1 2 0 1 2 ...  // 0 0.33 0.66 0 0.33 0.66 ...\r\n                const branchAngle = (i % parameters.branch) / parameters.branch * Math.PI * 2; \r\n\r\n                const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n                const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n                const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : -1);\r\n\r\n                positions[i3] = Math.cos(branchAngle + spinAngle) * radius + randomX;\r\n                positions[i3 + 1] = randomY;\r\n                positions[i3 + 2] = Math.sin(branchAngle + spinAngle) * radius + randomZ;\r\n\r\n                // Color\r\n                const mixedColor = colorInside.clone();\r\n                mixedColor.lerp(colorOutside, radius / parameters.radius);\r\n                colors[i3] = mixedColor.r;\r\n                colors[i3 + 1] = mixedColor.g;\r\n                colors[i3 + 2] = mixedColor.b;\r\n            }\r\n            geometry = new THREE.BufferGeometry();\r\n            geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\r\n            geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\r\n\r\n            // material\r\n            material = new THREE.PointsMaterial({\r\n                size: parameters.size,\r\n                sizeAttenuation: true,\r\n                depthWrite: false,\r\n                blending: THREE.AdditiveBlending,\r\n                vertexColors: true\r\n            })\r\n\r\n            // points\r\n            points = new THREE.Points(geometry, material);\r\n            scene.add(points);\r\n        }\r\n        generateGalaxy();\r\n        gui.add(parameters, \"count\", 100, 10000, 100).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"size\", 0.01, 0.1, 0.01).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"radius\", 0.01, 10, 0.01).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"branch\", 2, 10, 1).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"spin\", -5, 5, 0.01).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"randomness\", 0, 2, 0.01).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"randomnessPower\", 1, 10, 0.01).onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"insideColor\").onFinishChange(generateGalaxy);\r\n        gui.add(parameters, \"outsideColor\").onFinishChange(generateGalaxy);\r\n\r\n        /* sizes */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        })\r\n\r\n        /* camera */\r\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(2, 2, 2);\r\n        scene.add(camera);\r\n\r\n        /* controls */\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /* renderer */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        });\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /* Animate */\r\n        const clock = new THREE.Clock();\r\n        const tick = () => {\r\n            const elapsedTime = clock.getElapsedTime();\r\n\r\n            // update particles\r\n\r\n            // update controls\r\n            controls.update();\r\n\r\n            // update renderer\r\n            renderer.render(scene, camera);\r\n\r\n            // call tick again on the next frame\r\n            window.requestAnimationFrame(tick);\r\n        }\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas className=\"webgl\"></canvas>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["Galaxy","React","constructor","arguments","initThree","gui","GUI","canvas","document","querySelector","scene","THREE","parameters","geometry","material","points","generateGalaxy","dispose","remove","positions","Float32Array","count","colors","colorInside","insideColor","colorOutside","outsideColor","i","i3","radius","Math","random","spinAngle","spin","branchAngle","branch","PI","randomX","pow","randomnessPower","randomY","randomZ","cos","sin","mixedColor","clone","lerp","r","g","b","setAttribute","size","sizeAttenuation","depthWrite","blending","vertexColors","add","onFinishChange","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","position","set","controls","OrbitControls","enableDamping","clock","tick","getElapsedTime","update","render","requestAnimationFrame","componentDidMount","this","_jsx","_Fragment","children","className"],"sourceRoot":""}