{"version":3,"file":"static/js/618.6a34a6ff.chunk.js","mappings":"wPAKe,MAAMA,UAAkBC,EAAAA,UAAgBC,WAAAA,GAAA,SAAAC,WAAA,KAKnDC,UAAY,KAER,MAAMC,EAASC,SAASC,cAAc,gBAEhCC,EAAQ,IAAIC,EAAAA,IAIZC,GADgB,IAAID,EAAAA,KACYE,KAAKC,GAKrCC,EAAmB,IAAIJ,EAAAA,IAEvBK,EAAY,IAAIC,aAAaC,MAC7BC,EAAS,IAAIF,aAAaC,MAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,KAAWE,IAC3BJ,EAAUI,GAA6B,IAAvBC,KAAKC,SAAW,IAChCH,EAAOC,GAAKC,KAAKC,SAErBP,EAAiBQ,aAAa,WAAY,IAAIZ,EAAAA,IAAsBK,EAAW,IAC/ED,EAAiBQ,aAAa,QAAS,IAAIZ,EAAAA,IAAsBQ,EAAQ,IAEzE,MAAMK,EAAmB,IAAIb,EAAAA,IAAqB,CAC9Cc,KAAM,GACNC,iBAAiB,IAErBF,EAAiBG,aAAc,EAC/BH,EAAiBI,SAAWhB,EAG5BY,EAAiBK,YAAa,EAC9BL,EAAiBM,SAAWnB,EAAAA,IAC5Ba,EAAiBO,cAAe,EAGhC,MAAMC,EAAQ,IAAIrB,EAAAA,IAAaI,EAAkBS,GACjDd,EAAMuB,IAAID,GAGV,MAAME,EAAQ,CACVC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAGnBH,OAAOI,iBAAiB,UAAU,KAC9BN,EAAMC,MAAQC,OAAOC,WACrBH,EAAMI,OAASF,OAAOG,YAEtBE,EAAOC,OAASR,EAAMC,MAAQD,EAAMI,OACpCG,EAAOE,yBAEPC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAczB,KAAK0B,IAAIX,OAAOY,iBAAkB,GAAG,IAIhE,MAAMP,EAAS,IAAI9B,EAAAA,IAAwB,GAAIuB,EAAMC,MAAQD,EAAMI,OAAQ,GAAK,KAChFG,EAAOQ,SAASC,IAAI,EAAG,EAAG,GAC1BxC,EAAMuB,IAAIQ,GAGV,MAAMU,EAAW,IAAIC,EAAAA,EAAcX,EAAQlC,GAC3C4C,EAASE,eAAgB,EAGzB,MAAMT,EAAW,IAAIjC,EAAAA,IAAoB,CACrCJ,OAAQA,IAEZqC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAczB,KAAK0B,IAAIX,OAAOY,iBAAkB,IAGzD,MAAMM,EAAQ,IAAI3C,EAAAA,IAEZ4C,EAAOA,KAEWD,EAAME,iBAK1BL,EAASM,SAGTb,EAASc,OAAOhD,EAAO+B,GAGvBL,OAAOuB,sBAAsBJ,EAAK,EAEtCA,GAAM,CACT,CAhGDK,iBAAAA,GACIC,KAAKvD,WACT,CAgGAoD,MAAAA,GACI,OACII,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,WAG9B,E","sources":["containers/Particles/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport circleTexture from \"./textures/circle_02.png\"\r\n\r\nexport default class Particles extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* canvas */\r\n        const canvas = document.querySelector(\"canvas.webgl\");\r\n        /* scene */\r\n        const scene = new THREE.Scene();\r\n        /* Textures */\r\n        // https://www.kenney.nl/assets/particle-pack\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const particleTexture = textureLoader.load(circleTexture);\r\n        /* \r\n        Particles\r\n        */\r\n        // geometry\r\n        const particleGeometry = new THREE.BufferGeometry();\r\n        const count = 500;\r\n        const positions = new Float32Array(count * 3);\r\n        const colors = new Float32Array(count * 3);\r\n        for (let i = 0; i < count * 3; i++) {\r\n            positions[i] = (Math.random() - 0.5) * 10;\r\n            colors[i] = Math.random();\r\n        }\r\n        particleGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\r\n        particleGeometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\r\n        // material\r\n        const particleMateiral = new THREE.PointsMaterial({\r\n            size: 0.1,\r\n            sizeAttenuation: true // 粒子大小会根据摄像机距离自动调整，离得越远越小，反之。\r\n        });\r\n        particleMateiral.transparent = true;\r\n        particleMateiral.alphaMap = particleTexture;\r\n        // particleMateiral.alphaTest = 0.001;\r\n        // particleMateiral.depthTest = false;\r\n        particleMateiral.depthWrite = false;\r\n        particleMateiral.blending = THREE.AdditiveBlending; // 光的叠加效果\r\n        particleMateiral.vertexColors = true;\r\n\r\n        // points\r\n        const point = new THREE.Points(particleGeometry, particleMateiral);\r\n        scene.add(point);\r\n\r\n        /* sizes */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        })\r\n\r\n        /* camera */\r\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(2, 2, 2);\r\n        scene.add(camera);\r\n\r\n        /* controls */\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /* renderer */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        });\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /* Animate */\r\n        const clock = new THREE.Clock();\r\n\r\n        const tick = () => {\r\n\r\n            const elapsedTime = clock.getElapsedTime();\r\n\r\n            // update particles\r\n\r\n            // update controls\r\n            controls.update();\r\n\r\n            // update renderer\r\n            renderer.render(scene, camera);\r\n\r\n            // call tick again on the next frame\r\n            window.requestAnimationFrame(tick);\r\n        }\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas className=\"webgl\"></canvas>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["Particles","React","constructor","arguments","initThree","canvas","document","querySelector","scene","THREE","particleTexture","load","circleTexture","particleGeometry","positions","Float32Array","count","colors","i","Math","random","setAttribute","particleMateiral","size","sizeAttenuation","transparent","alphaMap","depthWrite","blending","vertexColors","point","add","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","position","set","controls","OrbitControls","enableDamping","clock","tick","getElapsedTime","update","render","requestAnimationFrame","componentDidMount","this","_jsx","_Fragment","children","className"],"sourceRoot":""}