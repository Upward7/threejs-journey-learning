"use strict";(self.webpackChunkreact_3d=self.webpackChunkreact_3d||[]).push([[515],{8849:(e,n,i)=>{i.r(n),i.d(n,{default:()=>v});var t=i(5043),o=i(9435),a=i(9408),r=i(7583),u=i(4322);i.p,i.p;const d=i.p+"static/media/indian-flag.7140d9f381093cbbeca7.png";var s=i(579);class v extends t.Component{constructor(){super(...arguments),this.initThree=()=>{const e=new u.Ay,n=document.querySelector("canvas.webgl"),i=new o.Z58,t=(new o.Tap).load(d),s=new o.bdM(1,1,32,32),v=s.attributes.position.count,l=new Float32Array(v);for(let o=0;o<v;o++)l[o]=Math.random();s.setAttribute("aRandom",new o.THS(l,1));const m=new o.D$Q({vertexShader:"\n            uniform mat4 projectionMatrix;\n            uniform mat4 viewMatrix;\n            uniform mat4 modelMatrix;\n            uniform vec2 uFrequency;\n            uniform float uTime;\n\n            attribute vec3 position;\n            attribute float aRandom;\n            attribute vec2 uv;\n\n            varying float vRandom;\n            varying vec2 vUv;\n            varying float vElevation;\n\n            void main()\n            {\n                vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n                float elevation = sin(modelPosition.x * uFrequency.x + uTime) * 0.1;\n                elevation += sin(modelPosition.y * uFrequency.y + uTime) * 0.1;\n                modelPosition.z += elevation;\n                // modelPosition.z += aRandom * 0.1;\n\n                vec4 viewPosition = viewMatrix * modelPosition;\n                vec4 projectedPosition = projectionMatrix * viewPosition;\n                gl_Position = projectedPosition;\n\n                vRandom = aRandom;\n                vUv = uv;\n                vElevation = elevation;\n            }\n            ",fragmentShader:"\n            precision mediump float;\n\n            uniform vec3 uColor;\n            uniform sampler2D uTexture;\n\n            varying float vRandom;\n            varying vec2 vUv;\n            varying float vElevation;\n\n            void main()\n            {\n                vec4 textureColor = texture2D(uTexture, vUv);\n                textureColor.rgb *= vElevation * 2.0 + 0.8;\n                // gl_FragColor = vec4(uColor, 1.0);\n                gl_FragColor = textureColor;\n            }\n            ",side:o.$EB,transparent:!0,uniforms:{uFrequency:{value:new o.I9Y(10,5)},uTime:{value:0},uColor:{value:new o.Q1f("orange")},uTexture:{value:t}}});e.add(m.uniforms.uFrequency.value,"x").min(0).max(20).step(.01).name("frequencyX"),e.add(m.uniforms.uFrequency.value,"y").min(0).max(20).step(.01).name("frequencyY");const c=new o.eaF(s,m);i.add(c);const w={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{w.width=window.innerWidth,w.height=window.innerHeight,h.aspect=w.width/w.height,h.updateProjectionMatrix(),f.setSize(w.width,w.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const h=new o.ubm(75,w.width/w.height,.1,100);h.position.set(4,1,-4),i.add(h);const p=new r.N(h,n);p.enableDamping=!0;const f=new a.JeP({canvas:n,antialias:!0});f.setSize(w.width,w.height),f.setPixelRatio(Math.min(window.devicePixelRatio,2));const g=new o.zD7,x=()=>{const e=g.getElapsedTime();m.uniforms.uTime.value=e,p.update(),f.render(i,h),window.requestAnimationFrame(x)};x()}}componentDidMount(){this.initThree()}render(){return(0,s.jsx)("canvas",{className:"webgl"})}}}}]);
//# sourceMappingURL=515.3dfb3d49.chunk.js.map