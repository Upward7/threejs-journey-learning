{"version":3,"file":"static/js/671.ff8bf480.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/loaders/FontLoader.js","../node_modules/three/examples/jsm/geometries/TextGeometry.js","containers/3d text/index.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n","/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  depth: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.depth === undefined ) parameters.depth = 50;\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n","import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\";\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\r\nimport texture from \"./textures/1.png\";\r\n\r\nexport default class threeText extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* \r\n        Canvas \r\n        */\r\n        const canvas = document.querySelector(\"canvas.webgl\");\r\n        /* \r\n        Scene \r\n        */\r\n        const scene = new THREE.Scene();\r\n\r\n        /* \r\n        Textures\r\n        */\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const matcapTexture = textureLoader.load(texture);\r\n        // https:github.com/nidorx/matcaps\r\n\r\n        /* \r\n        Font \r\n        */\r\n        const fontLoader = new FontLoader();\r\n        fontLoader.load(\r\n            \"./fonts/helvetiker_regular.typeface.json\",\r\n            (font) => {\r\n                const textGeometry = new TextGeometry(\r\n                    \"Hello ThreeJS\",\r\n                    {\r\n                        font: font,\r\n                        size: 0.5,\r\n                        depth: 0.2,\r\n                        curveSegments: 4,\r\n                        bevelEnabled: true,\r\n                        bevelThickness: 0.03,\r\n                        bevelSize: 0.02,\r\n                        bevelOffset: 0,\r\n                        bevelSegments: 5\r\n                    }\r\n                );\r\n                // textGeometry.computeBoundingBox();\r\n                // // bevelSize bevelThickness\r\n                // textGeometry.translate(\r\n                //     -(textGeometry.boundingBox.max.x - 0.02) * 0.5,\r\n                //     -(textGeometry.boundingBox.max.y - 0.02) * 0.5,\r\n                //     -(textGeometry.boundingBox.max.z - 0.03) * 0.5,\r\n                // );\r\n                textGeometry.center();\r\n\r\n                // 快速实现具有高光效果的表面渲染，matcap纹理用于模拟材质的表面特性。\r\n                const material = new THREE.MeshMatcapMaterial({ matcap: matcapTexture });\r\n                // textMaterial.wireframe = true;\r\n                const text = new THREE.Mesh(textGeometry, material);\r\n                scene.add(text);\r\n\r\n                const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\r\n                for (let i = 0; i < 100; i++) {\r\n                    const donut = new THREE.Mesh(donutGeometry, material);\r\n                    donut.position.x = (Math.random() - 0.5) * 10;\r\n                    donut.position.y = (Math.random() - 0.5) * 10;\r\n                    donut.position.z = (Math.random() - 0.5) * 10;\r\n\r\n                    donut.rotation.x = Math.random() * Math.PI;\r\n                    donut.rotation.y = Math.random() * Math.PI;\r\n                    const scale = Math.random();\r\n                    donut.scale.set(scale, scale, scale);\r\n\r\n                    scene.add(donut);\r\n                }\r\n            }\r\n        )\r\n\r\n        // Sizes\r\n        const size = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener('resize', () => {\r\n            // Update size\r\n            size.width = window.innerWidth;\r\n            size.height = window.innerHeight;\r\n\r\n            // Update Camera\r\n            camera.aspect = size.width / size.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            // Update renderer\r\n            renderer.setSize(size.width, size.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        })\r\n\r\n        /* \r\n        Camera \r\n        */\r\n        const camera = new THREE.PerspectiveCamera(75, size.width / size.height, 0.1, 100);\r\n        camera.position.set(1, 2, 3);\r\n        scene.add(camera);\r\n\r\n        /* \r\n        Controls \r\n        */\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /* \r\n        render \r\n        */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        });\r\n        renderer.setSize(size.width, size.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /*  Animations */\r\n\r\n        const tick = () => {\r\n\r\n            // Update Controls\r\n            controls.update();\r\n\r\n            // Render\r\n            renderer.render(scene, camera);\r\n            // Call tick again on the next frame\r\n            window.requestAnimationFrame(tick);\r\n        }\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas className=\"webgl\"></canvas>\r\n        )\r\n    }\r\n}"],"names":["FontLoader","Loader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","font","parse","JSON","json","Font","data","isFont","type","generateShapes","shapes","paths","size","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","length","char","ret","createPath","push","createPaths","arguments","undefined","p","pl","toShapes","glyph","glyphs","console","error","familyName","ShapePath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","TextGeometry","ExtrudeGeometry","parameters","depth","bevelThickness","bevelSize","bevelEnabled","threeText","React","initThree","canvas","document","querySelector","scene","THREE","matcapTexture","texture","textGeometry","curveSegments","bevelOffset","bevelSegments","center","material","matcap","add","donutGeometry","donut","position","Math","random","z","rotation","PI","set","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","controls","OrbitControls","enableDamping","tick","update","render","requestAnimationFrame","componentDidMount","_jsx","className"],"sourceRoot":""}