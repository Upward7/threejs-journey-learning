{"version":3,"file":"static/js/232.9d8b5e5b.chunk.js","mappings":"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CC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,IAChCC,EAAK,IAAOC,EAAeF,EAAK,IAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,IAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAEhCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAAOC,EAAeF,EAAK,KAChCC,EAAK,IAA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","sources":["../node_modules/three/examples/jsm/libs/fflate.module.js","../node_modules/three/examples/jsm/loaders/EXRLoader.js","../node_modules/three/examples/jsm/loaders/RGBELoader.js"],"sourcesContent":["/*!\nfflate - fast JavaScript compression/decompression\n<https://101arrowz.github.io/fflate>\nLicensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE\nversion 0.8.2\n*/\n\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tNoColorSpace,\n\tLinearFilter,\n\tLinearSRGBColorSpace,\n\tRedFormat,\n\tRGBAFormat\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\tparse( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst NBITS = 16;\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tlet k = 0;\n\n\t\t\tfor ( let i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( let i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( let i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tlet c = 0;\n\n\t\t\tfor ( let i = 58; i > 0; -- i ) {\n\n\t\t\t\tconst nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tconst l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tconst p = inOffset;\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tconst l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tlet zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tlet zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tconst c = hufCode( hcode[ im ] );\n\t\t\t\tconst l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tconst pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tconst p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( let i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tlet plOffset = 0;\n\n\t\t\t\t\tfor ( let i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tconst pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tlet cs = ( c >> lc );\n\t\t\t\tcs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tconst s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tconst ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tconst ls = Int16( l );\n\t\t\tconst hs = Int16( h );\n\n\t\t\tconst hi = hs;\n\t\t\tconst ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tconst as = ai;\n\t\t\tconst bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wdec16( l, h ) {\n\n\t\t\tconst m = UInt16( l );\n\t\t\tconst d = UInt16( h );\n\n\t\t\tconst bb = ( m - ( d >> 1 ) ) & MOD_MASK;\n\t\t\tconst aa = ( d + bb - A_OFFSET ) & MOD_MASK;\n\n\t\t\twdec14Return.a = aa;\n\t\t\twdec14Return.b = bb;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\n\n\t\t\tconst w14 = mx < ( 1 << 14 );\n\t\t\tconst n = ( nx > ny ) ? ny : nx;\n\t\t\tlet p = 1;\n\t\t\tlet p2;\n\t\t\tlet py;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tpy = 0;\n\t\t\t\tconst ey = py + oy * ( ny - p2 );\n\t\t\t\tconst oy1 = oy * p;\n\t\t\t\tconst oy2 = oy * p2;\n\t\t\t\tconst ox1 = ox * p;\n\t\t\t\tconst ox2 = ox * p2;\n\t\t\t\tlet i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\t\t\t\t\t\tconst p10 = px + oy1;\n\t\t\t\t\t\tconst p11 = p10 + ox1;\n\n\t\t\t\t\t\tif ( w14 ) {\n\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i00, i01 );\n\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\t\twdec16( i10, i11 );\n\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tconst p10 = px + oy1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tlet px = py;\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tconst p01 = px + ox1;\n\n\t\t\t\t\t\tif ( w14 )\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tlet c = 0;\n\t\t\tlet lc = 0;\n\t\t\tconst outBufferEndOffset = no;\n\t\t\tconst inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tconst index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tconst pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tconst l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tconst pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'hufDecode issues' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tconst outOffset = { value: 0 };\n\t\t\tconst initialInOffset = inOffset.value;\n\n\t\t\tconst im = parseUint32( inDataView, inOffset );\n\t\t\tconst iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tconst nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with HUF_ENCSIZE' );\n\n\t\t\t}\n\n\t\t\tconst freq = new Array( HUF_ENCSIZE );\n\t\t\tconst hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tconst ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow new Error( 'Something wrong with hufUncompress' );\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( let i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( let t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tconst d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tlet t1 = 0;\n\t\t\tlet t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tlet s = 0;\n\t\t\tconst stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tlet size = source.byteLength;\n\t\t\tconst out = new Array();\n\t\t\tlet p = 0;\n\n\t\t\tconst reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tconst l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tconst count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tconst value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( let i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tlet dataView = new DataView( outBuffer.buffer );\n\n\t\t\tconst width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tconst height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tconst numComp = 3;\n\n\t\t\tconst numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tconst numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tconst numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tconst leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tconst leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tconst currAcComp = { value: 0 };\n\t\t\tconst currDcComp = new Array( numComp );\n\t\t\tconst dctData = new Array( numComp );\n\t\t\tconst halfZigBlock = new Array( numComp );\n\t\t\tconst rowBlock = new Array( numComp );\n\t\t\tconst rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tlet maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tlet maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tconst halfRow = new Uint16Array( width );\n\t\t\tdataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( let y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tlet acValue;\n\t\t\tlet dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tconst alpha = new Array( 4 );\n\t\t\tconst beta = new Array( 4 );\n\t\t\tconst theta = new Array( 4 );\n\t\t\tconst gamma = new Array( 4 );\n\n\t\t\tfor ( let row = 0; row < 8; ++ row ) {\n\n\t\t\t\tconst rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( let column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tconst y = data[ 0 ][ i ];\n\t\t\t\tconst cb = data[ 1 ][ i ];\n\t\t\t\tconst cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = DataUtils.toHalfFloat( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tconst compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\n\t\t\tconst outBuffer = new Uint16Array( info.columns * info.lines * ( info.inputChannels.length * info.type ) );\n\t\t\tconst bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst pizChannelData = new Array( info.inputChannels.length );\n\t\t\tfor ( let i = 0, il = info.inputChannels.length; i < il; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.columns;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\n\t\t\tconst minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tconst maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow new Error( 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE' );\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( let i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tconst lut = new Uint16Array( USHORT_RANGE );\n\t\t\tconst maxValue = reverseLutFromBitmap( bitmap, lut );\n\n\t\t\tconst length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\n\n\t\t\t\tconst cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( let j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size,\n\t\t\t\t\t\tmaxValue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tlet tmpOffset = 0;\n\t\t\tconst tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\n\n\t\t\t\t\tconst cd = pizChannelData[ c ];\n\n\t\t\t\t\tconst n = cd.nx * cd.size;\n\t\t\t\t\tconst cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPXR( info ) {\n\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\n\n\t\t\tconst byteSize = info.inputChannels.length * info.lines * info.columns * info.totalBytes;\n\t\t\tconst tmpBuffer = new ArrayBuffer( byteSize );\n\t\t\tconst viewer = new DataView( tmpBuffer );\n\n\t\t\tlet tmpBufferEnd = 0;\n\t\t\tlet writePtr = 0;\n\t\t\tconst ptr = new Array( 4 );\n\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\n\n\t\t\t\t\tlet pixel = 0;\n\n\t\t\t\t\tconst type = info.inputChannels[ c ].pixelType;\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.columns;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\tviewer.setUint16( writePtr, pixel, true );\n\t\t\t\t\t\t\t\twritePtr += 2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.columns;\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.columns;\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\n\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\n\n\t\t\t\t\t\t\t\tpixel += diff;\n\n\t\t\t\t\t\t\t\tviewer.setUint32( writePtr, pixel, true );\n\t\t\t\t\t\t\t\twritePtr += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn viewer;\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tconst inDataView = info.viewer;\n\t\t\tconst inOffset = { value: info.offset.value };\n\t\t\tconst outBuffer = new Uint8Array( info.columns * info.lines * ( info.inputChannels.length * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tconst dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported' );\n\n\t\t\t// Read channel ruleset information\n\t\t\tconst channelRules = new Array();\n\t\t\tlet ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tconst value = parseUint8( inDataView, inOffset );\n\t\t\t\tconst compression = ( value >> 2 ) & 3;\n\t\t\t\tconst csc = ( value >> 4 ) - 1;\n\t\t\t\tconst index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tconst type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tconst channels = EXRHeader.channels;\n\t\t\tconst channelData = new Array( info.inputChannels.length );\n\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ] = {};\n\t\t\t\tconst channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.columns;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tconst cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( let offset = 0; offset < info.inputChannels.length; ++ offset ) {\n\n\t\t\t\tconst cd = channelData[ offset ];\n\n\t\t\t\tfor ( let i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tconst rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet acBuffer, dcBuffer, rleBuffer;\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tacBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tconst data = fflate.unzlibSync( compressed );\n\t\t\t\t\t\tacBuffer = new Uint16Array( data.buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tconst zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tdcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tconst data = fflate.unzlibSync( compressed );\n\t\t\t\trleBuffer = decodeRunLength( data.buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tlet outBufferEnd = 0;\n\t\t\tconst rowOffsets = new Array( channelData.length );\n\t\t\tfor ( let i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( let chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( let i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tconst cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tlet row = 0;\n\t\t\t\t\t\tlet rleOffset = 0;\n\n\t\t\t\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tlet rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( let byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported channel compression' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tconst uintBuffer = new Uint8Array( buffer );\n\t\t\tlet endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tconst stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tconst x = parseInt32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tconst x = parseUint32( dataView, offset );\n\t\t\tconst y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tconst Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tconst Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tconst Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tconst Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tconst parseInt64 = function ( dataView, offset ) {\n\n\t\t\tlet int;\n\n\t\t\tif ( 'getBigInt64' in DataView.prototype ) {\n\n\t\t\t\tint = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\t} else {\n\n\t\t\t\tint = dataView.getUint32( offset.value + 4, true ) + Number( dataView.getUint32( offset.value, true ) << 32 );\n\n\t\t\t}\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn int;\n\n\t\t};\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tconst float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn DataUtils.toHalfFloat( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tconst exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tconst Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tconst startOffset = offset.value;\n\t\t\tconst channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tconst name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tconst pixelType = parseInt32( dataView, offset );\n\t\t\t\tconst pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tconst xSampling = parseInt32( dataView, offset );\n\t\t\t\tconst ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tconst redX = parseFloat32( dataView, offset );\n\t\t\tconst redY = parseFloat32( dataView, offset );\n\t\t\tconst greenX = parseFloat32( dataView, offset );\n\t\t\tconst greenY = parseFloat32( dataView, offset );\n\t\t\tconst blueX = parseFloat32( dataView, offset );\n\t\t\tconst blueY = parseFloat32( dataView, offset );\n\t\t\tconst whiteX = parseFloat32( dataView, offset );\n\t\t\tconst whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tconst compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tconst compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tconst xMin = parseInt32( dataView, offset );\n\t\t\tconst yMin = parseInt32( dataView, offset );\n\t\t\tconst xMax = parseInt32( dataView, offset );\n\t\t\tconst yMax = parseInt32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tconst lineOrders = [\n\t\t\t\t'INCREASING_Y',\n\t\t\t\t'DECREASING_Y',\n\t\t\t\t'RANDOM_Y',\n\t\t\t];\n\n\t\t\tconst lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseEnvmap( dataView, offset ) {\n\n\t\t\tconst envmaps = [\n\t\t\t\t'ENVMAP_LATLONG',\n\t\t\t\t'ENVMAP_CUBE'\n\t\t\t];\n\n\t\t\tconst envmap = parseUint8( dataView, offset );\n\n\t\t\treturn envmaps[ envmap ];\n\n\t\t}\n\n\t\tfunction parseTiledesc( dataView, offset ) {\n\n\t\t\tconst levelModes = [\n\t\t\t\t'ONE_LEVEL',\n\t\t\t\t'MIPMAP_LEVELS',\n\t\t\t\t'RIPMAP_LEVELS',\n\t\t\t];\n\n\t\t\tconst roundingModes = [\n\t\t\t\t'ROUND_DOWN',\n\t\t\t\t'ROUND_UP',\n\t\t\t];\n\n\t\t\tconst xSize = parseUint32( dataView, offset );\n\t\t\tconst ySize = parseUint32( dataView, offset );\n\t\t\tconst modes = parseUint8( dataView, offset );\n\n\t\t\treturn {\n\t\t\t\txSize: xSize,\n\t\t\t\tySize: ySize,\n\t\t\t\tlevelMode: levelModes[ modes & 0xf ],\n\t\t\t\troundingMode: roundingModes[ modes >> 4 ]\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseV3f( dataView, offset ) {\n\n\t\t\tconst x = parseFloat32( dataView, offset );\n\t\t\tconst y = parseFloat32( dataView, offset );\n\t\t\tconst z = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y, z ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'envmap' ) {\n\n\t\t\t\treturn parseEnvmap( dataView, offset );\n\n\t\t\t} else if ( type === 'tiledesc' ) {\n\n\t\t\t\treturn parseTiledesc( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'v3f' ) {\n\n\t\t\t\treturn parseV3f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else if ( type === 'preview' ) {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn 'skipped';\n\n\t\t\t} else {\n\n\t\t\t\toffset.value += size;\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction roundLog2( x, mode ) {\n\n\t\t\tconst log2 = Math.log2( x );\n\t\t\treturn mode == 'ROUND_DOWN' ? Math.floor( log2 ) : Math.ceil( log2 );\n\n\t\t}\n\n\t\tfunction calculateTileLevels( tiledesc, w, h ) {\n\n\t\t\tlet num = 0;\n\n\t\t\tswitch ( tiledesc.levelMode ) {\n\n\t\t\t\tcase 'ONE_LEVEL':\n\t\t\t\t\tnum = 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'MIPMAP_LEVELS':\n\t\t\t\t\tnum = roundLog2( Math.max( w, h ), tiledesc.roundingMode ) + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RIPMAP_LEVELS':\n\t\t\t\t\tthrow new Error( 'THREE.EXRLoader: RIPMAP_LEVELS tiles currently unsupported.' );\n\n\t\t\t}\n\n\t\t\treturn num;\n\n\t\t}\n\n\t\tfunction calculateTiles( count, dataSize, size, roundingMode ) {\n\n\t\t\tconst tiles = new Array( count );\n\n\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\tconst b = ( 1 << i );\n\t\t\t\tlet s = ( dataSize / b ) | 0;\n\n\t\t\t\tif ( roundingMode == 'ROUND_UP' && s * b < dataSize ) s += 1;\n\n\t\t\t\tconst l = Math.max( s, 1 );\n\n\t\t\t\ttiles[ i ] = ( ( l + size - 1 ) / size ) | 0;\n\n\t\t\t}\n\n\t\t\treturn tiles;\n\n\t\t}\n\n\t\tfunction parseTiles() {\n\n\t\t\tconst EXRDecoder = this;\n\t\t\tconst offset = EXRDecoder.offset;\n\t\t\tconst tmpOffset = { value: 0 };\n\n\t\t\tfor ( let tile = 0; tile < EXRDecoder.tileCount; tile ++ ) {\n\n\t\t\t\tconst tileX = parseInt32( EXRDecoder.viewer, offset );\n\t\t\t\tconst tileY = parseInt32( EXRDecoder.viewer, offset );\n\t\t\t\toffset.value += 8; // skip levels - only parsing top-level\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset );\n\n\t\t\t\tconst startX = tileX * EXRDecoder.blockWidth;\n\t\t\t\tconst startY = tileY * EXRDecoder.blockHeight;\n\t\t\t\tEXRDecoder.columns = ( startX + EXRDecoder.blockWidth > EXRDecoder.width ) ? EXRDecoder.width - startX : EXRDecoder.blockWidth;\n\t\t\t\tEXRDecoder.lines = ( startY + EXRDecoder.blockHeight > EXRDecoder.height ) ? EXRDecoder.height - startY : EXRDecoder.blockHeight;\n\n\t\t\t\tconst bytesBlockLine = EXRDecoder.columns * EXRDecoder.totalBytes;\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesBlockLine;\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\n\n\t\t\t\toffset.value += EXRDecoder.size;\n\n\t\t\t\tfor ( let line = 0; line < EXRDecoder.lines; line ++ ) {\n\n\t\t\t\t\tconst lineOffset = line * EXRDecoder.columns * EXRDecoder.totalBytes;\n\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\n\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\n\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\n\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\n\t\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - ( 1 + startY + line ) ) * EXRDecoder.outLineWidth;\n\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\n\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + ( x + startX ) * EXRDecoder.outputChannels + cOff;\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseScanline() {\n\n\t\t\tconst EXRDecoder = this;\n\t\t\tconst offset = EXRDecoder.offset;\n\t\t\tconst tmpOffset = { value: 0 };\n\n\t\t\tfor ( let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.blockHeight; scanlineBlockIdx ++ ) {\n\n\t\t\t\tconst line = parseInt32( EXRDecoder.viewer, offset ) - EXRHeader.dataWindow.yMin; // line_no\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset ); // data_len\n\t\t\t\tEXRDecoder.lines = ( ( line + EXRDecoder.blockHeight > EXRDecoder.height ) ? ( EXRDecoder.height - line ) : EXRDecoder.blockHeight );\n\n\t\t\t\tconst bytesPerLine = EXRDecoder.columns * EXRDecoder.totalBytes;\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesPerLine;\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\n\n\t\t\t\toffset.value += EXRDecoder.size;\n\n\t\t\t\tfor ( let line_y = 0; line_y < EXRDecoder.blockHeight; line_y ++ ) {\n\n\t\t\t\t\tconst scan_y = scanlineBlockIdx * EXRDecoder.blockHeight;\n\t\t\t\t\tconst true_y = line_y + EXRDecoder.scanOrder( scan_y );\n\t\t\t\t\tif ( true_y >= EXRDecoder.height ) continue;\n\n\t\t\t\t\tconst lineOffset = line_y * bytesPerLine;\n\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - 1 - true_y ) * EXRDecoder.outLineWidth;\n\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\n\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\n\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\n\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\n\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\n\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + x * EXRDecoder.outputChannels + cOff;\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseHeader( dataView, buffer, offset ) {\n\n\t\t\tconst EXRHeader = {};\n\n\t\t\tif ( dataView.getUint32( 0, true ) != 20000630 ) { // magic\n\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file doesn\\'t appear to be in OpenEXR format.' );\n\n\t\t\t}\n\n\t\t\tEXRHeader.version = dataView.getUint8( 4 );\n\n\t\t\tconst spec = dataView.getUint8( 5 ); // fullMask\n\n\t\t\tEXRHeader.spec = {\n\t\t\t\tsingleTile: !! ( spec & 2 ),\n\t\t\t\tlongName: !! ( spec & 4 ),\n\t\t\t\tdeepFormat: !! ( spec & 8 ),\n\t\t\t\tmultiPart: !! ( spec & 16 ),\n\t\t\t};\n\n\t\t\t// start of header\n\n\t\t\toffset.value = 8; // start at 8 - after pre-amble\n\n\t\t\tlet keepReading = true;\n\n\t\t\twhile ( keepReading ) {\n\n\t\t\t\tconst attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\t\tif ( attributeName == 0 ) {\n\n\t\t\t\t\tkeepReading = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\t\tconst attributeSize = parseUint32( dataView, offset );\n\t\t\t\t\tconst attributeValue = parseValue( dataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\t\tif ( attributeValue === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( `THREE.EXRLoader: Skipped unknown header attribute type \\'${attributeType}\\'.` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( spec & ~ 0x06 ) != 0 ) { // unsupported deep-image, multi-part\n\n\t\t\t\tconsole.error( 'THREE.EXRHeader:', EXRHeader );\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file is currently unsupported.' );\n\n\t\t\t}\n\n\t\t\treturn EXRHeader;\n\n\t\t}\n\n\t\tfunction setupDecoder( EXRHeader, dataView, uInt8Array, offset, outputType ) {\n\n\t\t\tconst EXRDecoder = {\n\t\t\t\tsize: 0,\n\t\t\t\tviewer: dataView,\n\t\t\t\tarray: uInt8Array,\n\t\t\t\toffset: offset,\n\t\t\t\twidth: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n\t\t\t\theight: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n\t\t\t\tinputChannels: EXRHeader.channels,\n\t\t\t\tchannelByteOffsets: {},\n\t\t\t\tscanOrder: null,\n\t\t\t\ttotalBytes: null,\n\t\t\t\tcolumns: null,\n\t\t\t\tlines: null,\n\t\t\t\ttype: null,\n\t\t\t\tuncompress: null,\n\t\t\t\tgetter: null,\n\t\t\t\tformat: null,\n\t\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\t};\n\n\t\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\t\tcase 'NO_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRAW;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RLE_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIPS_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZIP_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PIZ_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPIZ;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PXR24_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPXR;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAA_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DWAB_COMPRESSION':\n\t\t\t\t\tEXRDecoder.blockHeight = 256;\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported' );\n\n\t\t\t}\n\n\t\t\tconst channels = {};\n\t\t\tfor ( const channel of EXRHeader.channels ) {\n\n\t\t\t\tswitch ( channel.name ) {\n\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\tcase 'R':\n\t\t\t\t\tcase 'G':\n\t\t\t\t\tcase 'B':\n\t\t\t\t\tcase 'A':\n\t\t\t\t\t\tchannels[ channel.name ] = true;\n\t\t\t\t\t\tEXRDecoder.type = channel.pixelType;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\t\t\tlet fillAlpha = false;\n\n\t\t\tif ( channels.R && channels.G && channels.B ) {\n\n\t\t\t\tfillAlpha = ! channels.A;\n\t\t\t\tEXRDecoder.outputChannels = 4;\n\t\t\t\tEXRDecoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n\n\t\t\t} else if ( channels.Y ) {\n\n\t\t\t\tEXRDecoder.outputChannels = 1;\n\t\t\t\tEXRDecoder.decodeChannels = { Y: 0 };\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'EXRLoader.parse: file contains unsupported data channels.' );\n\n\t\t\t}\n\n\t\t\tif ( EXRDecoder.type == 1 ) {\n\n\t\t\t\t// half\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat16;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseUint16;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( EXRDecoder.type == 2 ) {\n\n\t\t\t\t// float\n\t\t\t\tswitch ( outputType ) {\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat32;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tEXRDecoder.getter = decodeFloat32;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.' );\n\n\t\t\t}\n\n\t\t\tEXRDecoder.columns = EXRDecoder.width;\n\t\t\tconst size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n\t\t\tswitch ( outputType ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Float32Array( size );\n\n\t\t\t\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\t\t\t\tif ( fillAlpha )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 1, 0, size );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\t\t\t\t\tEXRDecoder.byteArray = new Uint16Array( size );\n\n\t\t\t\t\tif ( fillAlpha )\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', outputType );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlet byteOffset = 0;\n\t\t\tfor ( const channel of EXRHeader.channels ) {\n\n\t\t\t\tif ( EXRDecoder.decodeChannels[ channel.name ] !== undefined ) {\n\n\t\t\t\t\tEXRDecoder.channelByteOffsets[ channel.name ] = byteOffset;\n\n\t\t\t\t}\n\n\t\t\t\tbyteOffset += channel.pixelType * 2;\n\n\t\t\t}\n\n\t\t\tEXRDecoder.totalBytes = byteOffset;\n\t\t\tEXRDecoder.outLineWidth = EXRDecoder.width * EXRDecoder.outputChannels;\n\n\t\t\tif ( EXRHeader.lineOrder === 'INCREASING_Y' ) {\n\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => y;\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => EXRDecoder.height - 1 - y;\n\n\t\t\t}\n\n\t\t\tif ( EXRDecoder.outputChannels == 4 ) {\n\n\t\t\t\tEXRDecoder.format = RGBAFormat;\n\t\t\t\tEXRDecoder.colorSpace = LinearSRGBColorSpace;\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.format = RedFormat;\n\t\t\t\tEXRDecoder.colorSpace = NoColorSpace;\n\n\t\t\t}\n\n\t\t\tif ( EXRHeader.spec.singleTile ) {\n\n\t\t\t\tEXRDecoder.blockHeight = EXRHeader.tiles.ySize;\n\t\t\t\tEXRDecoder.blockWidth = EXRHeader.tiles.xSize;\n\n\t\t\t\tconst numXLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\n\t\t\t\t// const numYLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\n\n\t\t\t\tconst numXTiles = calculateTiles( numXLevels, EXRDecoder.width, EXRHeader.tiles.xSize, EXRHeader.tiles.roundingMode );\n\t\t\t\tconst numYTiles = calculateTiles( numXLevels, EXRDecoder.height, EXRHeader.tiles.ySize, EXRHeader.tiles.roundingMode );\n\n\t\t\t\tEXRDecoder.tileCount = numXTiles[ 0 ] * numYTiles[ 0 ];\n\n\t\t\t\tfor ( let l = 0; l < numXLevels; l ++ )\n\t\t\t\t\tfor ( let y = 0; y < numYTiles[ l ]; y ++ )\n\t\t\t\t\t\tfor ( let x = 0; x < numXTiles[ l ]; x ++ )\n\t\t\t\t\t\t\tparseInt64( dataView, offset ); // tileOffset\n\n\t\t\t\tEXRDecoder.decode = parseTiles.bind( EXRDecoder );\n\n\t\t\t} else {\n\n\t\t\t\tEXRDecoder.blockWidth = EXRDecoder.width;\n\t\t\t\tconst blockCount = Math.ceil( EXRDecoder.height / EXRDecoder.blockHeight );\n\n\t\t\t\tfor ( let i = 0; i < blockCount; i ++ )\n\t\t\t\t\tparseInt64( dataView, offset ); // scanlineOffset\n\n\t\t\t\tEXRDecoder.decode = parseScanline.bind( EXRDecoder );\n\n\t\t\t}\n\n\t\t\treturn EXRDecoder;\n\n\t\t}\n\n\t\t// start parsing file [START]\n\t\tconst offset = { value: 0 };\n\t\tconst bufferDataView = new DataView( buffer );\n\t\tconst uInt8Array = new Uint8Array( buffer );\n\n\t\t// get header information and validate format.\n\t\tconst EXRHeader = parseHeader( bufferDataView, buffer, offset );\n\n\t\t// get input compression information and prepare decoding.\n\t\tconst EXRDecoder = setupDecoder( EXRHeader, bufferDataView, uInt8Array, offset, this.type );\n\n\t\t// parse input data\n\t\tEXRDecoder.decode();\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: EXRDecoder.width,\n\t\t\theight: EXRDecoder.height,\n\t\t\tdata: EXRDecoder.byteArray,\n\t\t\tformat: EXRDecoder.format,\n\t\t\tcolorSpace: EXRDecoder.colorSpace,\n\t\t\ttype: this.type,\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\ttexture.colorSpace = texData.colorSpace;\n\t\t\ttexture.minFilter = LinearFilter;\n\t\t\ttexture.magFilter = LinearFilter;\n\t\t\ttexture.generateMipmaps = false;\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { EXRLoader };\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n"],"names":["u8","Uint8Array","u16","Uint16Array","i32","Int32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","s","length","l","co","le","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","subarray","ec","err","ind","msg","nt","Error","code","captureStackTrace","inflt","dat","st","buf","dict","sl","dl","f","noBuf","resize","noSt","cbuf","bl","nbuf","Math","set","final","pos","bt","lm","dm","lbt","dbt","n","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","lms","dms","lpos","sym","add","dsym","end","shift","dend","min","et","zls","unzlibSync","data","opts","dictionary","out","td","TextDecoder","decode","stream","queueMicrotask","setTimeout","EXRLoader","DataTextureLoader","constructor","manager","super","this","HalfFloatType","parse","buffer","USHORT_RANGE","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","logBase","pow","getBitsReturn","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","Array","hufUnpackEncTable","ni","im","iM","hcode","value","zerun","nc","hufCanonicalCodeTable","hufLength","hufCode","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","UInt16","Int16","ref","wdec14Return","wdec14","h","ls","hs","ai","as","bs","wdec16","bb","aa","wav2Decode","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufUncompress","inDataView","nCompressed","nRaw","initialInOffset","parseUint32","freq","hdec","len","lit","hufClearDecTable","hdecod","pl","plOffset","hufBuildDecTable","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","hufDecode","predictor","source","interleaveScalar","t1","t2","floor","stop","decodeRunLength","size","byteLength","reader","DataView","getInt8","count","push","getUint8","unRleAC","currAcComp","acBuffer","halfZigBlock","acValue","dctComp","unZigZag","src","dst","decodeFloat16","dctInverse","cos","g","alpha","beta","theta","gamma","row","rowPtr","column","csc709Inverse","y","cb","cr","convertToHalf","idx","DataUtils","toHalfFloat","toLinear","float","sign","abs","uncompressRAW","info","array","offset","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","fflate","uncompressPIZ","columns","lines","inputChannels","bitmap","outBufferEnd","pizChannelData","il","minNonZero","parseUint16","maxNonZero","parseUint8","lut","maxValue","k","reverseLutFromBitmap","nData","applyLut","tmpOffset","cp","uncompressPXR","byteSize","totalBytes","ArrayBuffer","tmpBufferEnd","writePtr","ptr","pixel","pixelType","setUint16","setUint32","uncompressDWA","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","EXRHeader","compression","channelRules","ruleSize","name","parseNullTerminatedString","index","Int8Array","channels","channelData","channel","decoded","pLinear","width","height","cscSet","rule","dcBuffer","rleBuffer","zlibInfo","rowOffsets","chan","rowPtrs","dataView","numFullBlocksX","numBlocksX","ceil","numBlocksY","leftoverX","leftoverY","currDcComp","dctData","rowBlock","comp","Float32Array","blocky","maxY","maxX","blockx","fill","halfRow","getUint16","setFloat32","lossyDctDecode","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","parseInt32","Int32","getInt32","Uint32","getUint32","Uint8","int","prototype","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","exponent","fraction","NaN","Infinity","Uint16","parseFloat16","parseValue","parseFixedLengthString","startOffset","xSampling","ySampling","parseChlist","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseChromaticities","parseCompression","xMin","yMin","xMax","yMax","parseBox2i","parseEnvmap","xSize","ySize","modes","levelMode","roundingMode","parseTiledesc","parseLineOrder","parseV2f","parseV3f","parseRational","parseTimecode","calculateTileLevels","tiledesc","w","num","mode","log2","roundLog2","calculateTiles","dataSize","tiles","parseTiles","EXRDecoder","tile","tileCount","tileX","tileY","startX","blockWidth","startY","blockHeight","bytesBlockLine","uncompress","line","lineOffset","channelID","lOff","channelByteOffsets","cOff","decodeChannels","undefined","outLineOffset","outLineWidth","outIndex","outputChannels","byteArray","getter","parseScanline","scanlineBlockIdx","dataWindow","bytesPerLine","line_y","scan_y","true_y","scanOrder","bufferDataView","spec","singleTile","longName","deepFormat","multiPart","keepReading","attributeName","attributeType","attributeValue","console","warn","concat","error","parseHeader","outputType","format","colorSpace","LinearSRGBColorSpace","fillAlpha","R","G","B","A","Y","FloatType","byteOffset","lineOrder","RGBAFormat","RedFormat","NoColorSpace","numXLevels","numXTiles","numYTiles","bind","blockCount","setupDecoder","header","setDataType","load","url","onLoad","onProgress","onError","texture","texData","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","RGBELoader","rgbe_error","rgbe_error_code","fgets","lineLimit","consume","chunk","String","fromCharCode","apply","indexOf","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","scale","RGBEByteToRGBHalf","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","valid","string","comments","programtype","exposure","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","image_rgba_data","scanline_width","data_rgba","ptr_end","rgbeStart","scanline_buffer","num_scanlines","isEncodedRun","byteValue","off","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray"],"sourceRoot":""}