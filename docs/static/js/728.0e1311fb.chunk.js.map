{"version":3,"file":"static/js/728.0e1311fb.chunk.js","mappings":"mTAOe,MAAMA,UAAqBC,EAAAA,UAAgBC,WAAAA,GAAA,SAAAC,WAAA,KAKtDC,UAAY,KAWR,MAAMC,EAASC,SAASC,cAAc,gBAEhCC,EAAQ,IAAIC,EAAAA,IAMZC,GADgB,IAAID,EAAAA,KACSE,KAAKC,GACxCF,EAAaG,OAAQ,EACrBH,EAAaI,WAAaL,EAAAA,IAG1B,MAAMM,EAAgB,IAAIN,EAAAA,IAAwB,CAAEO,IAAKN,IACnDO,EAAoB,IAAIR,EAAAA,IAAwB,CAAES,MAAO,WACzDC,EAAsB,IAAIV,EAAAA,IAAwB,CAAES,MAAO,YAG/C,IAAIE,EAAAA,GACZT,KACNU,GACCC,IACGA,EAAKd,MAAMe,UAASC,IAChBA,EAAMC,SAAWV,CAAa,IAGlC,MAAMW,EAAkBJ,EAAKd,MAAMmB,SAASC,MAAKJ,GAAuB,eAAdA,EAAMK,OAC1DC,EAAiBR,EAAKd,MAAMmB,SAASC,MAAKJ,GAAuB,cAAdA,EAAMK,OACzDE,EAAiBT,EAAKd,MAAMmB,SAASC,MAAKJ,GAAuB,cAAdA,EAAMK,OAI/DC,EAAeL,SAAWR,EAC1Bc,EAAeN,SAAWR,EAC1BS,EAAgBD,SAAWN,EAC3BX,EAAMwB,IAAIV,EAAKd,MAAM,IAO7B,MAAMyB,EAAQ,CACVC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAGnBH,OAAOI,iBAAiB,UAAU,KAC9BN,EAAMC,MAAQC,OAAOC,WACrBH,EAAMI,OAASF,OAAOG,YAEtBE,EAAOC,OAASR,EAAMC,MAAQD,EAAMI,OACpCG,EAAOE,yBAEPC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAcC,KAAKC,IAAIZ,OAAOa,iBAAkB,GAAG,IAMhE,MAAMR,EAAS,IAAI/B,EAAAA,IAAwB,GAAIwB,EAAMC,MAAQD,EAAMI,OAAQ,GAAK,KAChFG,EAAOS,SAASC,IAAI,EAAG,EAAG,GAC1B1C,EAAMwB,IAAIQ,GAKV,MAAMW,EAAW,IAAIC,EAAAA,EAAcZ,EAAQnC,GAC3C8C,EAASE,OAAOH,IAAI,EAAG,IAAM,GAC7BC,EAASG,eAAgB,EAKzB,MAAMX,EAAW,IAAIlC,EAAAA,IAAoB,CACrCJ,OAAQA,IAEZsC,EAASY,iBAAmB9C,EAAAA,IAC5BkC,EAASa,UAAUC,SAAU,EAC7Bd,EAASa,UAAUE,KAAOjD,EAAAA,IAC1BkC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAcC,KAAKC,IAAIZ,OAAOa,iBAAkB,IAEzD,MAAMW,EAAQ,IAAIlD,EAAAA,IAClB,IAAImD,EAAe,EACnB,MAAMC,EAAOA,KACT,MAAMC,EAAcH,EAAMI,iBAE1BH,EAAeE,EAEfnB,EAASqB,OAAOxD,EAAOgC,GACvBW,EAASc,SACT9B,OAAO+B,sBAAsBL,EAAK,EAEtCA,GAAM,CAGT,CAjHDM,iBAAAA,GACIC,KAAKhE,WACT,CAiHA4D,MAAAA,GACI,OACIK,EAAAA,EAAAA,KAAA,UAAQC,UAAU,SAE1B,E","sources":["containers/blender first/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport texture from \"./textures/baked.jpg\";\r\nimport model from \"./models/portal.glb\"\r\n\r\nexport default class helloBlender extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        // /* \r\n        // Spector JS\r\n        // */\r\n        // const SPECTOR = require(\"spectorjs\");\r\n        // spector = new SPECTOR.Spector()\r\n        // spector.displayUI()\r\n        /* \r\n        Base\r\n        */\r\n        // Canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\");\r\n        // Scene\r\n        const scene = new THREE.Scene();\r\n        /* \r\n        Models\r\n        */\r\n        // textures\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const bakedTexture = textureLoader.load(texture);\r\n        bakedTexture.flipY = false;\r\n        bakedTexture.colorSpace = THREE.SRGBColorSpace;\r\n\r\n        // baked material\r\n        const bakedMaterial = new THREE.MeshBasicMaterial({ map: bakedTexture });\r\n        const poleLightMaterial = new THREE.MeshBasicMaterial({ color: 0xffffe5 });\r\n        const portalLightMaterial = new THREE.MeshBasicMaterial({ color: 0xffffe5 })\r\n\r\n        // model\r\n        const gltfModel = new GLTFLoader();\r\n        gltfModel.load(\r\n            model,\r\n            (gltf) => {\r\n                gltf.scene.traverse(child => {\r\n                    child.material = bakedMaterial;\r\n                })\r\n                // const bakedMesh = gltf.scene.children.find(child => child.name == \"baked\")\r\n                const portalLightMesh = gltf.scene.children.find(child => child.name == \"portalLight\");\r\n                const poleLightAMesh = gltf.scene.children.find(child => child.name == \"poleLightA\");\r\n                const poleLightBMesh = gltf.scene.children.find(child => child.name == \"poleLightB\");\r\n\r\n                // aplly material\r\n                // bakedMesh.material = bakedMaterial; // 我的UV展开有问题 merge了以后 某些材质显示更不好了\r\n                poleLightAMesh.material = poleLightMaterial;\r\n                poleLightBMesh.material = poleLightMaterial;\r\n                portalLightMesh.material = portalLightMaterial;\r\n                scene.add(gltf.scene);\r\n            }\r\n        )\r\n\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(sizes.width, sizes.height);\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n        })\r\n\r\n        /* \r\n        Camera\r\n        */\r\n        const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(2, 2, 2);\r\n        scene.add(camera);\r\n\r\n        /* \r\n        Controls\r\n        */\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.target.set(0, 0.75, 0);\r\n        controls.enableDamping = true;\r\n\r\n        /* \r\n        Renderer\r\n        */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        });\r\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n        const clock = new THREE.Clock();\r\n        let previousTime = 0;\r\n        const tick = () => {\r\n            const elapsedTime = clock.getElapsedTime();\r\n            const deltaTime = elapsedTime - previousTime;\r\n            previousTime = elapsedTime;\r\n\r\n            renderer.render(scene, camera);\r\n            controls.update();\r\n            window.requestAnimationFrame(tick);\r\n        }\r\n        tick();\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas className=\"webgl\"></canvas>\r\n        )\r\n    }\r\n}"],"names":["helloBlender","React","constructor","arguments","initThree","canvas","document","querySelector","scene","THREE","bakedTexture","load","texture","flipY","colorSpace","bakedMaterial","map","poleLightMaterial","color","portalLightMaterial","GLTFLoader","model","gltf","traverse","child","material","portalLightMesh","children","find","name","poleLightAMesh","poleLightBMesh","add","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","position","set","controls","OrbitControls","target","enableDamping","outputColorSpace","shadowMap","enabled","type","clock","previousTime","tick","elapsedTime","getElapsedTime","render","update","requestAnimationFrame","componentDidMount","this","_jsx","className"],"sourceRoot":""}