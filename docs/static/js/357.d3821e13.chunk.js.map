{"version":3,"file":"static/js/357.d3821e13.chunk.js","mappings":"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","sources":["containers/Physics/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\"\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"\r\nimport GUI from \"three/examples/jsm/libs/lil-gui.module.min.js\"\r\nimport * as CANNON from \"cannon-es\";\r\nimport sound from \"./sounds/hit.mp3\";\r\nimport texturenx from \"./textures/nx.png\";\r\nimport textureny from \"./textures/ny.png\";\r\nimport texturenz from \"./textures/nz.png\";\r\nimport texturepx from \"./textures/px.png\";\r\nimport texturepy from \"./textures/py.png\";\r\nimport texturepz from \"./textures/pz.png\";\r\n\r\nexport default class Physics extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        /* \r\n        Debug\r\n        */\r\n        const gui = new GUI();\r\n        const debugObject = {}\r\n        debugObject.createSphere = () => {\r\n            createSphere(\r\n                0.5 * Math.random(),\r\n                {\r\n                    x: (Math.random() - 0.5) * 3,\r\n                    y: 3,\r\n                    z: (Math.random() - 0.5) * 3\r\n                }\r\n            )\r\n        }\r\n        debugObject.createBox = () => {\r\n            createBox(\r\n                Math.random(),\r\n                Math.random(),\r\n                Math.random(),\r\n                {\r\n                    x: (Math.random() - 0.5) * 3,\r\n                    y: 3,\r\n                    z: (Math.random() - 0.5) * 3\r\n                }\r\n            )\r\n        }\r\n        gui.reset = () => {\r\n            for (const object of objectsToUpdate) {\r\n                // remove body\r\n                object.body.removeEventListener(\"collide\", playHitSound);\r\n                world.removeBody(object.body)\r\n\r\n                // remove mesh\r\n                scene.remove(object.mesh)\r\n            }\r\n            objectsToUpdate.splice(0, objectsToUpdate.length);\r\n        }\r\n        gui.add(debugObject, \"createSphere\")\r\n        gui.add(debugObject, \"createBox\")\r\n        gui.add(debugObject, \"reset\")\r\n\r\n        /* \r\n        Base\r\n        */\r\n        // canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\")\r\n        // scene\r\n        const scene = new THREE.Scene();\r\n        /* \r\n        Sounds\r\n        */\r\n        const hitSound = new Audio(sound);\r\n        const playHitSound = (collision) => {\r\n            const impactStrength = collision.contact.getImpactVelocityAlongNormal();\r\n            if (impactStrength > 1.5) {\r\n                hitSound.volume = Math.random();\r\n                hitSound.currentTime = 0\r\n                hitSound.play();\r\n            }\r\n        }\r\n\r\n        /* \r\n        Textures\r\n        */\r\n        const cubeTextureLoader = new THREE.CubeTextureLoader();\r\n        const environmentMapTexture = cubeTextureLoader.load([\r\n            texturepx,\r\n            texturenx,\r\n            texturepy,\r\n            textureny,\r\n            texturepz,\r\n            texturenz\r\n        ])\r\n\r\n        /* \r\n        Physics\r\n        */\r\n        // World\r\n        const world = new CANNON.World();\r\n        world.gravity.set(0, -9.82, 0);\r\n        world.broadphase = new CANNON.SAPBroadphase(world);\r\n        world.allowSleep = true;\r\n\r\n        // Materials\r\n        const defaultMaterial = new CANNON.Material(\"default\")\r\n        const defaultContactMaterial = new CANNON.ContactMaterial(\r\n            defaultMaterial,\r\n            defaultMaterial,\r\n            {\r\n                friction: 0.1,\r\n                restitution: 0.7\r\n            }\r\n        )\r\n        world.addContactMaterial(defaultContactMaterial);\r\n        world.defaultContactMaterial = defaultContactMaterial;\r\n\r\n        // // Sphere\r\n        // const sphereShape = new CANNON.Sphere(0.5);\r\n        // const sphereBody = new CANNON.Body({\r\n        //     mass: 1,\r\n        //     position: new CANNON.Vec3(0, 3, 0),\r\n        //     shape: sphereShape\r\n        // })\r\n        // world.addBody(sphereBody);\r\n\r\n        // Floor\r\n        const floorShape = new CANNON.Plane();\r\n        const floorBody = new CANNON.Body();\r\n        floorBody.mass = 0;\r\n        floorBody.addShape(floorShape);\r\n        floorBody.quaternion.setFromAxisAngle(\r\n            new CANNON.Vec3(-1, 0, 0),\r\n            Math.PI * 0.5\r\n        )\r\n        world.addBody(floorBody);\r\n\r\n        // /* \r\n        // Test sphere\r\n        // */\r\n        // const sphere = new THREE.Mesh(\r\n        //     new THREE.SphereGeometry(0.5, 32, 32),\r\n        //     new THREE.MeshStandardMaterial({\r\n        //         metalness: 0.3,\r\n        //         roughness: 0.4,\r\n        //         envMap: environmentMapTexture\r\n        //     })\r\n        // )\r\n        // sphere.castShadow = true;\r\n        // sphere.position.y = 0.5;\r\n        // scene.add(sphere)\r\n\r\n        /* \r\n        Floor\r\n        */\r\n        const floor = new THREE.Mesh(\r\n            new THREE.PlaneGeometry(10, 10),\r\n            new THREE.MeshStandardMaterial({\r\n                color: \"#777777\",\r\n                metalness: 0.3,\r\n                roughness: 0.4,\r\n                envMap: environmentMapTexture\r\n            })\r\n        )\r\n        floor.receiveShadow = true;\r\n        floor.rotation.x = - Math.PI * 0.5;\r\n        scene.add(floor);\r\n\r\n        /* \r\n        Lights\r\n        */\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.7)\r\n        scene.add(ambientLight)\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.2);\r\n        directionalLight.castShadow = true;\r\n        directionalLight.shadow.mapSize.set(1024, 1024);\r\n        directionalLight.shadow.camera.far = 15;\r\n        directionalLight.shadow.camera.left = -7;\r\n        directionalLight.shadow.camera.top = 7;\r\n        directionalLight.shadow.camera.right = 7;\r\n        directionalLight.shadow.camera.bottom = -7;\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n\r\n        window.addEventListener('resize', () => {\r\n            sizes.width = window.innerWidth;\r\n            sizes.height = window.innerHeight;\r\n\r\n            camera.aspect = sizes.width / sizes.height;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.render(scene, camera)\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n        })\r\n\r\n        /* \r\n        Camera\r\n        */\r\n        // Base camera\r\n        const camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100);\r\n        camera.position.set(-3, 3, 3);\r\n\r\n        // Controls\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /* \r\n        Renderer\r\n        */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas\r\n        })\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFShadowMap;\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\r\n        /* \r\n        Utils\r\n        */\r\n        const objectsToUpdate = [];\r\n\r\n        // Sphere\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 20, 20);\r\n        const sphereMaterial = new THREE.MeshStandardMaterial({\r\n            metalness: 0.3,\r\n            roughness: 0.4,\r\n            envMap: environmentMapTexture\r\n        })\r\n\r\n        const createSphere = (radius, position) => {\r\n            // Three.js mesh\r\n            const mesh = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n            mesh.castShadow = true;\r\n            mesh.scale.set(radius, radius, radius);\r\n            mesh.position.copy(position);\r\n            scene.add(mesh);\r\n\r\n            // Cannon.js body\r\n            const shape = new CANNON.Sphere(radius);\r\n            const body = new CANNON.Body({\r\n                mass: 1,\r\n                shape,\r\n                material: environmentMapTexture\r\n            })\r\n            body.position.copy(position);\r\n            body.addEventListener(\"collide\", playHitSound);\r\n            world.addBody(body);\r\n\r\n            // Save in objects to update\r\n            objectsToUpdate.push({\r\n                mesh,\r\n                body\r\n            })\r\n        }\r\n        createSphere(0.5, { x: 0, y: 3, z: 0 })\r\n\r\n        // box\r\n        const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\n        const boxMaterial = new THREE.MeshStandardMaterial({\r\n            metalness: 0.3,\r\n            roughness: 0.4,\r\n            envMap: environmentMapTexture\r\n        })\r\n\r\n        const createBox = (width, height, depth, position) => {\r\n            // Three.js mesh\r\n            const mesh = new THREE.Mesh(boxGeometry, boxMaterial)\r\n            mesh.castShadow = true;\r\n            mesh.scale.set(width, height, depth);\r\n            mesh.position.copy(position);\r\n            scene.add(mesh);\r\n\r\n            // Cannon.js body\r\n            const shape = new CANNON.Box(new CANNON.Vec3(width * 0.5, height * 0.5, depth * 0.5));\r\n            const body = new CANNON.Body({\r\n                mass: 1,\r\n                shape,\r\n                material: environmentMapTexture\r\n            })\r\n            body.position.copy(position);\r\n            body.addEventListener(\"collide\", playHitSound);\r\n            world.addBody(body);\r\n\r\n            // Save in objects to update\r\n            objectsToUpdate.push({\r\n                mesh,\r\n                body\r\n            })\r\n        }\r\n\r\n        /* \r\n        Animation\r\n        */\r\n        const clock = new THREE.Clock();\r\n        let oldElasedTime = 0;\r\n\r\n        const tick = () => {\r\n\r\n            const elapsedTime = clock.getElapsedTime();\r\n            const deltaTime = elapsedTime - oldElasedTime;\r\n            oldElasedTime = elapsedTime;\r\n\r\n            // Update physics world\r\n            // 1. a fixed time step\r\n            // 2. how much time passed since the last step\r\n            // 3. how much iterations the world can apply to catch up with a potential delay\r\n            world.step(1 / 60, deltaTime, 3);\r\n            // sphere.position.copy(sphereBody.position);\r\n\r\n            for (const object of objectsToUpdate) {\r\n                object.mesh.position.copy(object.body.position);\r\n                object.mesh.quaternion.copy(object.body.quaternion); // update the rotation\r\n            }\r\n\r\n            // update controls\r\n            controls.update();\r\n\r\n            // renderer\r\n            renderer.render(scene, camera);\r\n\r\n            // call tick again on the next frame\r\n            window.requestAnimationFrame(tick)\r\n        }\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <canvas className=\"webgl\"></canvas>\r\n            </>\r\n        )\r\n    }\r\n}"],"names":["Physics","React","constructor","arguments","initThree","gui","GUI","debugObject","createSphere","Math","random","x","y","z","createBox","reset","object","objectsToUpdate","body","removeEventListener","playHitSound","world","removeBody","scene","remove","mesh","splice","length","add","canvas","document","querySelector","THREE","hitSound","Audio","sound","collision","contact","getImpactVelocityAlongNormal","volume","currentTime","play","environmentMapTexture","load","texturepx","texturenx","texturepy","textureny","texturepz","texturenz","CANNON","gravity","set","broadphase","allowSleep","defaultMaterial","defaultContactMaterial","friction","restitution","addContactMaterial","floorShape","floorBody","mass","addShape","quaternion","setFromAxisAngle","PI","addBody","floor","color","metalness","roughness","envMap","receiveShadow","rotation","ambientLight","directionalLight","castShadow","shadow","mapSize","camera","far","left","top","right","bottom","sizes","width","window","innerWidth","height","innerHeight","addEventListener","aspect","updateProjectionMatrix","renderer","render","setPixelRatio","min","devicePixelRatio","position","controls","OrbitControls","enableDamping","shadowMap","enabled","type","setSize","sphereGeometry","sphereMaterial","radius","scale","copy","shape","material","push","boxGeometry","boxMaterial","depth","clock","oldElasedTime","tick","elapsedTime","getElapsedTime","deltaTime","step","update","requestAnimationFrame","componentDidMount","this","_jsx","_Fragment","children","className"],"sourceRoot":""}