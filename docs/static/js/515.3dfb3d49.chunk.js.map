{"version":3,"file":"static/js/515.3dfb3d49.chunk.js","mappings":"4QAQe,MAAMA,UAAgBC,EAAAA,UAAgBC,WAAAA,GAAA,SAAAC,WAAA,KAKjDC,UAAY,KAER,MAAMC,EAAM,IAAIC,EAAAA,GAEVC,EAASC,SAASC,cAAc,gBAEhCC,EAAQ,IAAIC,EAAAA,IAMZC,GADgB,IAAID,EAAAA,KACQE,KAAKC,GAMjCC,EAAW,IAAIJ,EAAAA,IAAoB,EAAG,EAAG,GAAI,IAE7CK,EAAQD,EAASE,WAAWC,SAASF,MACrCG,EAAU,IAAIC,aAAaJ,GACjC,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAOK,IACvBF,EAAQE,GAAKC,KAAKC,SAGtBR,EAASS,aAAa,UAAW,IAAIb,EAAAA,IAAsBQ,EAAS,IAGpE,MAAMM,EAAW,IAAId,EAAAA,IAAwB,CACzCe,aAAa,omCAgCbC,eAAe,ygBAkBfC,KAAMjB,EAAAA,IACNkB,aAAa,EACbC,SACA,CACIC,WAAY,CAAEC,MAAO,IAAIrB,EAAAA,IAAc,GAAI,IAC3CsB,MAAO,CAAED,MAAO,GAChBE,OAAQ,CAAEF,MAAO,IAAIrB,EAAAA,IAAY,WACjCwB,SAAU,CAAEH,MAAOpB,MAI3BP,EAAI+B,IAAIX,EAASK,SAASC,WAAWC,MAAO,KAAKK,IAAI,GAAGC,IAAI,IAAIC,KAAK,KAAMC,KAAK,cAChFnC,EAAI+B,IAAIX,EAASK,SAASC,WAAWC,MAAO,KAAKK,IAAI,GAAGC,IAAI,IAAIC,KAAK,KAAMC,KAAK,cAGhF,MAAMC,EAAO,IAAI9B,EAAAA,IAAWI,EAAUU,GACtCf,EAAM0B,IAAIK,GAKV,MAAMC,EAAQ,CACVC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAEnBH,OAAOI,iBAAiB,UAAU,KAC9BN,EAAMC,MAAQC,OAAOC,WACrBH,EAAMI,OAASF,OAAOG,YAEtBE,EAAOC,OAASR,EAAMC,MAAQD,EAAMI,OACpCG,EAAOE,yBAEPC,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAchC,KAAKe,IAAIO,OAAOW,iBAAkB,GAAG,IAOhE,MAAMN,EAAS,IAAItC,EAAAA,IACf,GACA+B,EAAMC,MAAQD,EAAMI,OACpB,GACA,KAEJG,EAAO/B,SAASsC,IAAI,EAAG,GAAI,GAC3B9C,EAAM0B,IAAIa,GAGV,MAAMQ,EAAW,IAAIC,EAAAA,EAAcT,EAAQ1C,GAC3CkD,EAASE,eAAgB,EAKzB,MAAMP,EAAW,IAAIzC,EAAAA,IAAoB,CACrCJ,OAAQA,EAIRqD,WAAW,IAEfR,EAASC,QAAQX,EAAMC,MAAOD,EAAMI,QACpCM,EAASE,cAAchC,KAAKe,IAAIO,OAAOW,iBAAkB,IAKzD,MAAMM,EAAQ,IAAIlD,EAAAA,IACZmD,EAAOA,KAGT,MAAMC,EAAcF,EAAMG,iBAG1BvC,EAASK,SAASG,MAAMD,MAAQ+B,EAGhCN,EAASQ,SAGTb,EAASc,OAAOxD,EAAOuC,GAGvBL,OAAOuB,sBAAsBL,EAAK,EAGtCA,GAAM,CACT,CA7KDM,iBAAAA,GACIC,KAAKjE,WACT,CA6KA8D,MAAAA,GACI,OACII,EAAAA,EAAAA,KAAA,UAAQC,UAAU,SAE1B,E","sources":["containers/shaders/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/addons/controls/OrbitControls.js\";\r\nimport GUI from \"three/examples/jsm/libs/lil-gui.module.min.js\";\r\nimport testVertexShader from \"./vertex.glsl?raw\";\r\nimport testFragmentShader from \"./fragment.glsl?raw\";\r\nimport flag from \"./textures/indian-flag.png\";\r\n\r\nexport default class Shaders extends React.Component {\r\n    componentDidMount() {\r\n        this.initThree();\r\n    }\r\n\r\n    initThree = () => {\r\n        // Debug\r\n        const gui = new GUI();\r\n        // Canvas\r\n        const canvas = document.querySelector(\"canvas.webgl\")\r\n        // scene\r\n        const scene = new THREE.Scene();\r\n\r\n        /* \r\n        Textures\r\n        */\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const flagTexture = textureLoader.load(flag);\r\n\r\n        /* \r\n        Test mesh\r\n        */\r\n        // geometry\r\n        const geometry = new THREE.PlaneGeometry(1, 1, 32, 32)\r\n\r\n        const count = geometry.attributes.position.count;\r\n        const randoms = new Float32Array(count);\r\n        for (let i = 0; i < count; i++) {\r\n            randoms[i] = Math.random()\r\n        }\r\n        // setting a custom attribute to the geometry which will be used in the vertex shader\r\n        geometry.setAttribute(\"aRandom\", new THREE.BufferAttribute(randoms, 1))\r\n\r\n        // material\r\n        const material = new THREE.RawShaderMaterial({\r\n            vertexShader: `\r\n            uniform mat4 projectionMatrix;\r\n            uniform mat4 viewMatrix;\r\n            uniform mat4 modelMatrix;\r\n            uniform vec2 uFrequency;\r\n            uniform float uTime;\r\n\r\n            attribute vec3 position;\r\n            attribute float aRandom;\r\n            attribute vec2 uv;\r\n\r\n            varying float vRandom;\r\n            varying vec2 vUv;\r\n            varying float vElevation;\r\n\r\n            void main()\r\n            {\r\n                vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n                float elevation = sin(modelPosition.x * uFrequency.x + uTime) * 0.1;\r\n                elevation += sin(modelPosition.y * uFrequency.y + uTime) * 0.1;\r\n                modelPosition.z += elevation;\r\n                // modelPosition.z += aRandom * 0.1;\r\n\r\n                vec4 viewPosition = viewMatrix * modelPosition;\r\n                vec4 projectedPosition = projectionMatrix * viewPosition;\r\n                gl_Position = projectedPosition;\r\n\r\n                vRandom = aRandom;\r\n                vUv = uv;\r\n                vElevation = elevation;\r\n            }\r\n            `,\r\n            fragmentShader: `\r\n            precision mediump float;\r\n\r\n            uniform vec3 uColor;\r\n            uniform sampler2D uTexture;\r\n\r\n            varying float vRandom;\r\n            varying vec2 vUv;\r\n            varying float vElevation;\r\n\r\n            void main()\r\n            {\r\n                vec4 textureColor = texture2D(uTexture, vUv);\r\n                textureColor.rgb *= vElevation * 2.0 + 0.8;\r\n                // gl_FragColor = vec4(uColor, 1.0);\r\n                gl_FragColor = textureColor;\r\n            }\r\n            `,\r\n            side: THREE.DoubleSide,\r\n            transparent: true,\r\n            uniforms:\r\n            {\r\n                uFrequency: { value: new THREE.Vector2(10, 5) },\r\n                uTime: { value: 0 },\r\n                uColor: { value: new THREE.Color(\"orange\") },\r\n                uTexture: { value: flagTexture }\r\n            }\r\n        })\r\n\r\n        gui.add(material.uniforms.uFrequency.value, \"x\").min(0).max(20).step(0.01).name(\"frequencyX\")\r\n        gui.add(material.uniforms.uFrequency.value, \"y\").min(0).max(20).step(0.01).name(\"frequencyY\")\r\n\r\n        // mesh\r\n        const mesh = new THREE.Mesh(geometry, material)\r\n        scene.add(mesh)\r\n\r\n        /* \r\n        Sizes\r\n        */\r\n        const sizes = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }\r\n        window.addEventListener(\"resize\", () => {\r\n            sizes.width = window.innerWidth\r\n            sizes.height = window.innerHeight\r\n\r\n            camera.aspect = sizes.width / sizes.height\r\n            camera.updateProjectionMatrix()\r\n\r\n            renderer.setSize(sizes.width, sizes.height)\r\n            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n        })\r\n\r\n        /**\r\n         * Camera\r\n         */\r\n        // Base camera\r\n        const camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            sizes.width / sizes.height,\r\n            0.1,\r\n            100\r\n        );\r\n        camera.position.set(4, 1, -4);\r\n        scene.add(camera);\r\n\r\n        // Controls\r\n        const controls = new OrbitControls(camera, canvas);\r\n        controls.enableDamping = true;\r\n\r\n        /**\r\n         * Renderer\r\n         */\r\n        const renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            /**\r\n             * To make the edges of the objects more smooth\r\n             */\r\n            antialias: true,\r\n        });\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n\r\n        /**\r\n         * Animate\r\n         */\r\n        const clock = new THREE.Clock()\r\n        const tick = () => {\r\n\r\n            // Time\r\n            const elapsedTime = clock.getElapsedTime();\r\n\r\n            // update material\r\n            material.uniforms.uTime.value = elapsedTime;\r\n\r\n            // Update controls\r\n            controls.update();\r\n\r\n            // Render\r\n            renderer.render(scene, camera);\r\n\r\n            // Call tick again on the next frame\r\n            window.requestAnimationFrame(tick);\r\n        };\r\n\r\n        tick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas className=\"webgl\"></canvas>\r\n        )\r\n    }\r\n}"],"names":["Shaders","React","constructor","arguments","initThree","gui","GUI","canvas","document","querySelector","scene","THREE","flagTexture","load","flag","geometry","count","attributes","position","randoms","Float32Array","i","Math","random","setAttribute","material","vertexShader","fragmentShader","side","transparent","uniforms","uFrequency","value","uTime","uColor","uTexture","add","min","max","step","name","mesh","sizes","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","set","controls","OrbitControls","enableDamping","antialias","clock","tick","elapsedTime","getElapsedTime","update","render","requestAnimationFrame","componentDidMount","this","_jsx","className"],"sourceRoot":""}